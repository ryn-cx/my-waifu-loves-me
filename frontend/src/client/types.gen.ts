// This file is auto-generated by @hey-api/openapi-ts

/**
 * Anime or Manga
 */
export type app__media__graphql_media_schema__Media = {
    /**
     * A weighted average score of all the user's scores of the media
     */
    averageScore?: (number | null);
    /**
     * The banner image of the media
     */
    bannerImage?: (string | null);
    /**
     * The amount of chapters the manga has when complete
     */
    chapters?: (number | null);
    /**
     * Where the media was created. (ISO 3166-1 alpha-2)
     */
    countryOfOrigin?: (string | null);
    /**
     * The cover images of the media
     */
    coverImage?: (app__media__graphql_media_schema__MediaCoverImage | null);
    /**
     * Short description of the media's story and characters
     */
    description?: (string | null);
    /**
     * The general length of each anime episode in minutes
     */
    duration?: (number | null);
    /**
     * The last official release date of the media
     */
    endDate?: (FuzzyDate | null);
    /**
     * The amount of episodes the anime has when complete
     */
    episodes?: (number | null);
    /**
     * External links to another site related to the media
     */
    externalLinks?: (Array<(MediaExternalLink | null)> | null);
    /**
     * The amount of user's who have favourited the media
     */
    favourites?: (number | null);
    /**
     * The format the media was released in
     */
    format?: (MediaFormat | null);
    /**
     * The genres of the media
     */
    genres?: (Array<(string | null)> | null);
    /**
     * The id of the media
     */
    id: number;
    /**
     * The mal id of the media
     */
    idMal?: (number | null);
    /**
     * If the media is intended only for 18+ adult audiences
     */
    isAdult?: (boolean | null);
    /**
     * If the media is officially licensed or a self-published doujin release
     */
    isLicensed?: (boolean | null);
    /**
     * Mean score of all the user's scores of the media
     */
    meanScore?: (number | null);
    /**
     * The number of users with the media on their list
     */
    popularity?: (number | null);
    /**
     * The ranking of the media in a particular time span and format compared to other media
     */
    rankings?: (Array<(MediaRank | null)> | null);
    /**
     * User recommendations for similar media
     */
    recommendations?: (RecommendationConnection | null);
    /**
     * Other media in the same or connecting franchise
     */
    relations?: (MediaConnection | null);
    /**
     * The season the media was initially released in
     */
    season?: (MediaSeason | null);
    /**
     * The season year the media was initially released in
     */
    seasonYear?: (number | null);
    /**
     * The url for the media page on the AniList website
     */
    siteUrl?: (string | null);
    /**
     * Source type the media was adapted from.
     */
    source?: (MediaSource | null);
    /**
     * The first official release date of the media
     */
    startDate?: (FuzzyDate | null);
    /**
     * The current releasing status of the media
     */
    status?: (MediaStatus | null);
    /**
     * The companies who produced the media
     */
    studios?: (StudioConnection | null);
    /**
     * Alternative titles of the media
     */
    synonyms?: (Array<(string | null)> | null);
    /**
     * List of tags that describes elements and themes of the media
     */
    tags?: (Array<(MediaTag | null)> | null);
    /**
     * The official titles of the media in various languages
     */
    title?: (app__media__graphql_media_schema__MediaTitle | null);
    /**
     * Media trailer or advertisement
     */
    trailer?: (MediaTrailer | null);
    /**
     * The type of the media; anime or manga
     */
    type?: (MediaType | null);
    /**
     * When the media's data was last updated
     */
    updatedAt?: (number | null);
    /**
     * The amount of volumes the manga has when complete
     */
    volumes?: (number | null);
    __typename?: ("Media" | null);
};

export type app__media__graphql_media_schema__MediaCoverImage = {
    /**
     * Average #hex color of cover image
     */
    color?: (string | null);
    /**
     * The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.
     */
    extraLarge?: (string | null);
    /**
     * The cover image url of the media at a large size
     */
    large?: (string | null);
    /**
     * The cover image url of the media at medium size
     */
    medium?: (string | null);
    __typename?: ("MediaCoverImage" | null);
};

/**
 * The official titles of the media in various languages
 */
export type app__media__graphql_media_schema__MediaTitle = {
    /**
     * The official english title
     */
    english?: (string | null);
    /**
     * Official title in it's native language
     */
    native?: (string | null);
    /**
     * The romanization of the native language title
     */
    romaji?: (string | null);
    /**
     * The currently authenticated users preferred title language. Default romaji for non-authenticated
     */
    userPreferred?: (string | null);
    __typename?: ("MediaTitle" | null);
};

/**
 * Anime or Manga
 */
export type app__media__graphql_search_schema__Media = {
    /**
     * The id of the media
     */
    id: number;
    /**
     * The official titles of the media in various languages
     */
    title?: (app__media__graphql_search_schema__MediaTitle | null);
    /**
     * The cover images of the media
     */
    coverImage?: (app__media__graphql_search_schema__MediaCoverImage | null);
    /**
     * The type of the media; anime or manga
     */
    type?: (MediaType | null);
    /**
     * The format the media was released in
     */
    format?: (MediaFormat | null);
    /**
     * The current releasing status of the media
     */
    status?: (MediaStatus | null);
    /**
     * A weighted average score of all the user's scores of the media
     */
    averageScore?: (number | null);
    /**
     * The first official release date of the media
     */
    startDate?: (FuzzyDate | null);
};

export type app__media__graphql_search_schema__MediaCoverImage = {
    /**
     * The cover image url of the media at a large size
     */
    large?: (string | null);
    /**
     * The cover image url of the media at medium size
     */
    medium?: (string | null);
};

/**
 * The official titles of the media in various languages
 */
export type app__media__graphql_search_schema__MediaTitle = {
    /**
     * The official english title
     */
    english?: (string | null);
    /**
     * Official title in it's native language
     */
    native?: (string | null);
    /**
     * The romanization of the native language title
     */
    romaji?: (string | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ExternalLinkType = 'INFO' | 'SOCIAL' | 'STREAMING';

/**
 * Date object that allows for incomplete date values (fuzzy)
 */
export type FuzzyDate = {
    /**
     * Numeric Day (24)
     */
    day?: (number | null);
    /**
     * Numeric Month (3)
     */
    month?: (number | null);
    /**
     * Numeric Year (2017)
     */
    year?: (number | null);
    __typename?: ("FuzzyDate" | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type MediaConnection = {
    edges?: (Array<(MediaEdge | null)> | null);
    nodes?: (Array<(app__media__graphql_media_schema__Media | null)> | null);
    /**
     * The pagination information
     */
    pageInfo?: (PageInfo | null);
    __typename?: ("MediaConnection" | null);
};

/**
 * Media connection edge
 */
export type MediaEdge = {
    /**
     * The id of the connection
     */
    id?: (number | null);
    node?: (app__media__graphql_media_schema__Media | null);
    __typename?: ("MediaEdge" | null);
};

/**
 * An external link to another site related to the media or staff member
 */
export type MediaExternalLink = {
    color?: (string | null);
    /**
     * The icon image url of the site. Not available for all links. Transparent PNG 64x64
     */
    icon?: (string | null);
    /**
     * The id of the external link
     */
    id: number;
    isDisabled?: (boolean | null);
    /**
     * Language the site content is in. See Staff language field for values.
     */
    language?: (string | null);
    notes?: (string | null);
    /**
     * The links website site name
     */
    site: string;
    /**
     * The links website site id
     */
    siteId?: (number | null);
    type?: (ExternalLinkType | null);
    /**
     * The url of the external link or base url of link source
     */
    url?: (string | null);
    __typename?: ("MediaExternalLink" | null);
};

/**
 * The format the media was released in
 */
export type MediaFormat = 'MANGA' | 'MOVIE' | 'MUSIC' | 'NOVEL' | 'ONA' | 'ONE_SHOT' | 'OVA' | 'SPECIAL' | 'TV' | 'TV_SHORT';

/**
 * List of anime or manga.
 */
export type MediaList = {
    mediaId: number;
};

/**
 * List of anime or manga.
 */
export type MediaListCollection = {
    lists: (Array<(MediaListGroup | null)> | null);
};

/**
 * List group of anime or manga entries.
 */
export type MediaListGroup = {
    entries: (Array<(MediaList | null)> | null);
    status: (MediaListStatus | null);
};

/**
 * Media list watching/reading status enum.
 */
export type MediaListStatus = 'COMPLETED' | 'CURRENT' | 'DROPPED' | 'PAUSED' | 'PLANNING' | 'REPEATING';

/**
 * The ranking of a media in a particular time span and format compared to other media
 */
export type MediaRank = {
    /**
     * If the ranking is based on all time instead of a season/year
     */
    allTime?: (boolean | null);
    /**
     * String that gives context to the ranking type and time span
     */
    context: string;
    /**
     * The format the media is ranked within
     */
    format: MediaFormat;
    /**
     * The id of the rank
     */
    id: number;
    /**
     * The numerical rank of the media
     */
    rank: number;
    /**
     * The season the media is ranked within
     */
    season?: (MediaSeason | null);
    type: MediaRankType;
    /**
     * The year the media is ranked within
     */
    year?: (number | null);
    __typename?: ("MediaRank" | null);
};

/**
 * The type of ranking
 */
export type MediaRankType = 'POPULAR' | 'RATED';

export type MediaSeason = 'FALL' | 'SPRING' | 'SUMMER' | 'WINTER';

/**
 * Source type the media was adapted from
 */
export type MediaSource = 'ANIME' | 'COMIC' | 'DOUJINSHI' | 'GAME' | 'LIGHT_NOVEL' | 'LIVE_ACTION' | 'MANGA' | 'MULTIMEDIA_PROJECT' | 'NOVEL' | 'ORIGINAL' | 'OTHER' | 'PICTURE_BOOK' | 'VIDEO_GAME' | 'VISUAL_NOVEL' | 'WEB_NOVEL';

/**
 * The current releasing status of the media
 */
export type MediaStatus = 'CANCELLED' | 'FINISHED' | 'HIATUS' | 'NOT_YET_RELEASED' | 'RELEASING';

/**
 * A tag that describes a theme or element of the media
 */
export type MediaTag = {
    /**
     * The categories of tags this tag belongs to
     */
    category?: (string | null);
    /**
     * A general description of the tag
     */
    description?: (string | null);
    /**
     * The id of the tag
     */
    id: number;
    /**
     * If the tag is only for adult 18+ media
     */
    isAdult?: (boolean | null);
    /**
     * If the tag could be a spoiler for any media
     */
    isGeneralSpoiler?: (boolean | null);
    /**
     * If the tag is a spoiler for this media
     */
    isMediaSpoiler?: (boolean | null);
    /**
     * The name of the tag
     */
    name: string;
    /**
     * The relevance ranking of the tag out of the 100 for this media
     */
    rank?: (number | null);
    /**
     * The user who submitted the tag
     */
    userId?: (number | null);
    __typename?: ("MediaTag" | null);
};

/**
 * Media trailer or advertisement
 */
export type MediaTrailer = {
    /**
     * The trailer video id
     */
    id?: (string | null);
    /**
     * The site the video is hosted by (Currently either youtube or dailymotion)
     */
    site?: (string | null);
    /**
     * The url for the thumbnail image of the video
     */
    thumbnail?: (string | null);
    __typename?: ("MediaTrailer" | null);
};

/**
 * Media type enum, anime or manga.
 */
export type MediaType = 'ANIME' | 'MANGA';

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PageInfo = {
    /**
     * The current page
     */
    currentPage?: (number | null);
    /**
     * If there is another page
     */
    hasNextPage?: (boolean | null);
    /**
     * The last page
     */
    lastPage?: (number | null);
    /**
     * The count on a page
     */
    perPage?: (number | null);
    /**
     * The total number of items. Note: This value is not guaranteed to be accurate, do not rely on this for logic
     */
    total?: (number | null);
    __typename?: ("PageInfo" | null);
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * Media recommendation
 */
export type Recommendation = {
    /**
     * The id of the recommendation
     */
    id: number;
    /**
     * The recommended media
     */
    mediaRecommendation?: (app__media__graphql_media_schema__Media | null);
    /**
     * Users rating of the recommendation
     */
    rating?: (number | null);
    __typename?: ("Recommendation" | null);
};

export type RecommendationConnection = {
    edges?: (Array<(RecommendationEdge | null)> | null);
    nodes?: (Array<(Recommendation | null)> | null);
    /**
     * The pagination information
     */
    pageInfo?: (PageInfo | null);
    __typename?: ("RecommendationConnection" | null);
};

/**
 * Recommendation connection edge
 */
export type RecommendationEdge = {
    node?: (Recommendation | null);
    __typename?: ("RecommendationEdge" | null);
};

/**
 * Search page response.
 */
export type SearchPage = {
    pageInfo?: (PageInfo | null);
    media?: (Array<(app__media__graphql_search_schema__Media | null)> | null);
};

/**
 * Animation or production company
 */
export type Studio = {
    /**
     * The id of the studio
     */
    id: number;
    /**
     * If the studio is an animation studio or a different kind of company
     */
    isAnimationStudio: boolean;
    /**
     * The name of the studio
     */
    name: string;
    __typename?: ("Studio" | null);
};

export type StudioConnection = {
    edges?: (Array<(StudioEdge | null)> | null);
    nodes?: (Array<(Studio | null)> | null);
    /**
     * The pagination information
     */
    pageInfo?: (PageInfo | null);
    __typename?: ("StudioConnection" | null);
};

/**
 * Studio connection edge
 */
export type StudioEdge = {
    /**
     * The order the character should be displayed from the users favourites
     */
    favouriteOrder?: (number | null);
    /**
     * The id of the connection
     */
    id?: (number | null);
    /**
     * If the studio is the main animation studio of the anime
     */
    isMain: boolean;
    node?: (Studio | null);
    __typename?: ("StudioEdge" | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type MediaReadMediaData = {
    mediaId: number;
};

export type MediaReadMediaResponse = (app__media__graphql_media_schema__Media);

export type MediaReadUserData = {
    userName: string;
};

export type MediaReadUserResponse = (MediaListCollection);

export type MediaSearchMediaData = {
    mediaType: string;
    searchQuery: string;
};

export type MediaSearchMediaResponse = (SearchPage);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);