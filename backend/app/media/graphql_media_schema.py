# generated by datamodel-codegen:
#   filename:  schema.graphql

from __future__ import annotations

from enum import Enum
from typing import Literal, TypeAlias

from pydantic import BaseModel, ConfigDict, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


CountryCode: TypeAlias = str
"""
ISO 3166-1 alpha-2 country code
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class ExternalLinkType(Enum):
    info = "INFO"
    social = "SOCIAL"
    streaming = "STREAMING"


class MediaFormat(Enum):
    """
    The format the media was released in
    """

    manga = "MANGA"
    movie = "MOVIE"
    music = "MUSIC"
    novel = "NOVEL"
    ona = "ONA"
    one_shot = "ONE_SHOT"
    ova = "OVA"
    special = "SPECIAL"
    tv = "TV"
    tv_short = "TV_SHORT"


class MediaRankType(Enum):
    """
    The type of ranking
    """

    popular = "POPULAR"
    rated = "RATED"


class MediaSeason(Enum):
    fall = "FALL"
    spring = "SPRING"
    summer = "SUMMER"
    winter = "WINTER"


class MediaSource(Enum):
    """
    Source type the media was adapted from
    """

    anime = "ANIME"
    comic = "COMIC"
    doujinshi = "DOUJINSHI"
    game = "GAME"
    light_novel = "LIGHT_NOVEL"
    live_action = "LIVE_ACTION"
    manga = "MANGA"
    multimedia_project = "MULTIMEDIA_PROJECT"
    novel = "NOVEL"
    original = "ORIGINAL"
    other = "OTHER"
    picture_book = "PICTURE_BOOK"
    video_game = "VIDEO_GAME"
    visual_novel = "VISUAL_NOVEL"
    web_novel = "WEB_NOVEL"


class MediaStatus(Enum):
    """
    The current releasing status of the media
    """

    cancelled = "CANCELLED"
    finished = "FINISHED"
    hiatus = "HIATUS"
    not_yet_released = "NOT_YET_RELEASED"
    releasing = "RELEASING"


class MediaType(Enum):
    """
    Media type enum, anime or manga.
    """

    anime = "ANIME"
    manga = "MANGA"


class FuzzyDate(BaseModel):
    """
    Date object that allows for incomplete date values (fuzzy)
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    day: Int | None = Field(None, description="Numeric Day (24)")
    month: Int | None = Field(None, description="Numeric Month (3)")
    year: Int | None = Field(None, description="Numeric Year (2017)")
    typename__: Literal["FuzzyDate"] | None = Field("FuzzyDate", alias="__typename")


class MediaCoverImage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    color: String | None = Field(None, description="Average #hex color of cover image")
    extra_large: String | None = Field(
        None,
        alias="extraLarge",
        description="The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.",
    )
    large: String | None = Field(
        None, description="The cover image url of the media at a large size"
    )
    medium: String | None = Field(
        None, description="The cover image url of the media at medium size"
    )
    typename__: Literal["MediaCoverImage"] | None = Field(
        "MediaCoverImage", alias="__typename"
    )


class MediaExternalLink(BaseModel):
    """
    An external link to another site related to the media or staff member
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    color: String | None = None
    icon: String | None = Field(
        None,
        description="The icon image url of the site. Not available for all links. Transparent PNG 64x64",
    )
    id: Int = Field(..., description="The id of the external link")
    is_disabled: Boolean | None = Field(None, alias="isDisabled")
    language: String | None = Field(
        None,
        description="Language the site content is in. See Staff language field for values.",
    )
    notes: String | None = None
    site: String = Field(..., description="The links website site name")
    site_id: Int | None = Field(
        None, alias="siteId", description="The links website site id"
    )
    type: ExternalLinkType | None = None
    url: String | None = Field(
        None, description="The url of the external link or base url of link source"
    )
    typename__: Literal["MediaExternalLink"] | None = Field(
        "MediaExternalLink", alias="__typename"
    )


class MediaRank(BaseModel):
    """
    The ranking of a media in a particular time span and format compared to other media
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    all_time: Boolean | None = Field(
        None,
        alias="allTime",
        description="If the ranking is based on all time instead of a season/year",
    )
    context: String = Field(
        ..., description="String that gives context to the ranking type and time span"
    )
    format: MediaFormat = Field(
        ..., description="The format the media is ranked within"
    )
    id: Int = Field(..., description="The id of the rank")
    rank: Int = Field(..., description="The numerical rank of the media")
    season: MediaSeason | None = Field(
        None, description="The season the media is ranked within"
    )
    type: MediaRankType = Field(..., description="The type of ranking")
    year: Int | None = Field(None, description="The year the media is ranked within")
    typename__: Literal["MediaRank"] | None = Field("MediaRank", alias="__typename")


class MediaTag(BaseModel):
    """
    A tag that describes a theme or element of the media
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    category: String | None = Field(
        None, description="The categories of tags this tag belongs to"
    )
    description: String | None = Field(
        None, description="A general description of the tag"
    )
    id: Int = Field(..., description="The id of the tag")
    is_adult: Boolean | None = Field(
        None, alias="isAdult", description="If the tag is only for adult 18+ media"
    )
    is_general_spoiler: Boolean | None = Field(
        None,
        alias="isGeneralSpoiler",
        description="If the tag could be a spoiler for any media",
    )
    is_media_spoiler: Boolean | None = Field(
        None,
        alias="isMediaSpoiler",
        description="If the tag is a spoiler for this media",
    )
    name: String = Field(..., description="The name of the tag")
    rank: Int | None = Field(
        None,
        description="The relevance ranking of the tag out of the 100 for this media",
    )
    user_id: Int | None = Field(
        None, alias="userId", description="The user who submitted the tag"
    )
    typename__: Literal["MediaTag"] | None = Field("MediaTag", alias="__typename")


class MediaTitle(BaseModel):
    """
    The official titles of the media in various languages
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    english: String | None = Field(None, description="The official english title")
    native: String | None = Field(
        None, description="Official title in it's native language"
    )
    romaji: String | None = Field(
        None, description="The romanization of the native language title"
    )
    user_preferred: String | None = Field(
        None,
        alias="userPreferred",
        description="The currently authenticated users preferred title language. Default romaji for non-authenticated",
    )
    typename__: Literal["MediaTitle"] | None = Field("MediaTitle", alias="__typename")


class MediaTrailer(BaseModel):
    """
    Media trailer or advertisement
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: String | None = Field(None, description="The trailer video id")
    site: String | None = Field(
        None,
        description="The site the video is hosted by (Currently either youtube or dailymotion)",
    )
    thumbnail: String | None = Field(
        None, description="The url for the thumbnail image of the video"
    )
    typename__: Literal["MediaTrailer"] | None = Field(
        "MediaTrailer", alias="__typename"
    )


class PageInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    current_page: Int | None = Field(
        None, alias="currentPage", description="The current page"
    )
    has_next_page: Boolean | None = Field(
        None, alias="hasNextPage", description="If there is another page"
    )
    last_page: Int | None = Field(None, alias="lastPage", description="The last page")
    per_page: Int | None = Field(
        None, alias="perPage", description="The count on a page"
    )
    total: Int | None = Field(
        None,
        description="The total number of items. Note: This value is not guaranteed to be accurate, do not rely on this for logic",
    )
    typename__: Literal["PageInfo"] | None = Field("PageInfo", alias="__typename")


class Studio(BaseModel):
    """
    Animation or production company
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int = Field(..., description="The id of the studio")
    is_animation_studio: Boolean = Field(
        ...,
        alias="isAnimationStudio",
        description="If the studio is an animation studio or a different kind of company",
    )
    name: String = Field(..., description="The name of the studio")
    typename__: Literal["Studio"] | None = Field("Studio", alias="__typename")


class StudioEdge(BaseModel):
    """
    Studio connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    favourite_order: Int | None = Field(
        None,
        alias="favouriteOrder",
        description="The order the character should be displayed from the users favourites",
    )
    id: Int | None = Field(None, description="The id of the connection")
    is_main: Boolean = Field(
        ...,
        alias="isMain",
        description="If the studio is the main animation studio of the anime",
    )
    node: Studio | None = None
    typename__: Literal["StudioEdge"] | None = Field("StudioEdge", alias="__typename")


class StudioConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[StudioEdge | None] | None = None
    nodes: list[Studio | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["StudioConnection"] | None = Field(
        "StudioConnection", alias="__typename"
    )


class Recommendation(BaseModel):
    """
    Media recommendation
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int = Field(..., description="The id of the recommendation")
    media_recommendation: Media | None = Field(
        None, alias="mediaRecommendation", description="The recommended media"
    )
    rating: Int | None = Field(None, description="Users rating of the recommendation")
    typename__: Literal["Recommendation"] | None = Field(
        "Recommendation", alias="__typename"
    )


class RecommendationEdge(BaseModel):
    """
    Recommendation connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: Recommendation | None = None
    typename__: Literal["RecommendationEdge"] | None = Field(
        "RecommendationEdge", alias="__typename"
    )


class RecommendationConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[RecommendationEdge | None] | None = None
    nodes: list[Recommendation | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["RecommendationConnection"] | None = Field(
        "RecommendationConnection", alias="__typename"
    )


class MediaEdge(BaseModel):
    """
    Media connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int | None = Field(None, description="The id of the connection")
    node: Media | None = None
    typename__: Literal["MediaEdge"] | None = Field("MediaEdge", alias="__typename")


class Media(BaseModel):
    """
    Anime or Manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    average_score: Int | None = Field(
        None,
        alias="averageScore",
        description="A weighted average score of all the user's scores of the media",
    )
    banner_image: String | None = Field(
        None, alias="bannerImage", description="The banner image of the media"
    )
    chapters: Int | None = Field(
        None, description="The amount of chapters the manga has when complete"
    )
    country_of_origin: CountryCode | None = Field(
        None,
        alias="countryOfOrigin",
        description="Where the media was created. (ISO 3166-1 alpha-2)",
    )
    cover_image: MediaCoverImage | None = Field(
        None, alias="coverImage", description="The cover images of the media"
    )
    description: String | None = Field(
        None, description="Short description of the media's story and characters"
    )
    duration: Int | None = Field(
        None, description="The general length of each anime episode in minutes"
    )
    end_date: FuzzyDate | None = Field(
        None, alias="endDate", description="The last official release date of the media"
    )
    episodes: Int | None = Field(
        None, description="The amount of episodes the anime has when complete"
    )
    external_links: list[MediaExternalLink | None] | None = Field(
        None,
        alias="externalLinks",
        description="External links to another site related to the media",
    )
    favourites: Int | None = Field(
        None, description="The amount of user's who have favourited the media"
    )
    format: MediaFormat | None = Field(
        None, description="The format the media was released in"
    )
    genres: list[String | None] | None = Field(
        None, description="The genres of the media"
    )
    id: Int = Field(..., description="The id of the media")
    id_mal: Int | None = Field(
        None, alias="idMal", description="The mal id of the media"
    )
    is_adult: Boolean | None = Field(
        None,
        alias="isAdult",
        description="If the media is intended only for 18+ adult audiences",
    )
    is_licensed: Boolean | None = Field(
        None,
        alias="isLicensed",
        description="If the media is officially licensed or a self-published doujin release",
    )
    mean_score: Int | None = Field(
        None,
        alias="meanScore",
        description="Mean score of all the user's scores of the media",
    )
    popularity: Int | None = Field(
        None, description="The number of users with the media on their list"
    )
    rankings: list[MediaRank | None] | None = Field(
        None,
        description="The ranking of the media in a particular time span and format compared to other media",
    )
    recommendations: RecommendationConnection | None = Field(
        None, description="User recommendations for similar media"
    )
    season: MediaSeason | None = Field(
        None, description="The season the media was initially released in"
    )
    season_year: Int | None = Field(
        None,
        alias="seasonYear",
        description="The season year the media was initially released in",
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the media page on the AniList website",
    )
    source: MediaSource | None = Field(
        None, description="Source type the media was adapted from."
    )
    start_date: FuzzyDate | None = Field(
        None,
        alias="startDate",
        description="The first official release date of the media",
    )
    status: MediaStatus | None = Field(
        None, description="The current releasing status of the media"
    )
    studios: StudioConnection | None = Field(
        None, description="The companies who produced the media"
    )
    synonyms: list[String | None] | None = Field(
        None, description="Alternative titles of the media"
    )
    tags: list[MediaTag | None] | None = Field(
        None, description="List of tags that describes elements and themes of the media"
    )
    title: MediaTitle | None = Field(
        None, description="The official titles of the media in various languages"
    )
    trailer: MediaTrailer | None = Field(
        None, description="Media trailer or advertisement"
    )
    type: MediaType | None = Field(
        None, description="The type of the media; anime or manga"
    )
    updated_at: Int | None = Field(
        None, alias="updatedAt", description="When the media's data was last updated"
    )
    volumes: Int | None = Field(
        None, description="The amount of volumes the manga has when complete"
    )
    typename__: Literal["Media"] | None = Field("Media", alias="__typename")
