# generated by datamodel-codegen:
#   filename:  schema.graphql

from __future__ import annotations

from enum import Enum
from typing import Literal, TypeAlias, Union

from pydantic import BaseModel, ConfigDict, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


CountryCode: TypeAlias = str
"""
ISO 3166-1 alpha-2 country code
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


FuzzyDateInt: TypeAlias = str
"""
8 digit long date integer (YYYYMMDD). Unknown dates represented by 0. E.g. 2016: 20160000, May 1976: 19760500
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


Json: TypeAlias = str


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class ActivitySort(Enum):
    """
    Activity sort enums
    """

    id = "ID"
    id_desc = "ID_DESC"
    pinned = "PINNED"


class ActivityType(Enum):
    """
    Activity type enum.
    """

    anime_list = "ANIME_LIST"
    manga_list = "MANGA_LIST"
    media_list = "MEDIA_LIST"
    message = "MESSAGE"
    text = "TEXT"


class AiringSort(Enum):
    """
    Airing schedule sort enums
    """

    episode = "EPISODE"
    episode_desc = "EPISODE_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    media_id = "MEDIA_ID"
    media_id_desc = "MEDIA_ID_DESC"
    time = "TIME"
    time_desc = "TIME_DESC"


class CharacterRole(Enum):
    """
    The role the character plays in the media
    """

    background = "BACKGROUND"
    main = "MAIN"
    supporting = "SUPPORTING"


class CharacterSort(Enum):
    """
    Character sort enums
    """

    favourites = "FAVOURITES"
    favourites_desc = "FAVOURITES_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    relevance = "RELEVANCE"
    role = "ROLE"
    role_desc = "ROLE_DESC"
    search_match = "SEARCH_MATCH"


class ExternalLinkMediaType(Enum):
    anime = "ANIME"
    manga = "MANGA"
    staff = "STAFF"


class ExternalLinkType(Enum):
    info = "INFO"
    social = "SOCIAL"
    streaming = "STREAMING"


class LikeableType(Enum):
    """
    Types that can be liked
    """

    activity = "ACTIVITY"
    activity_reply = "ACTIVITY_REPLY"
    thread = "THREAD"
    thread_comment = "THREAD_COMMENT"


class MediaFormat(Enum):
    """
    The format the media was released in
    """

    manga = "MANGA"
    movie = "MOVIE"
    music = "MUSIC"
    novel = "NOVEL"
    ona = "ONA"
    one_shot = "ONE_SHOT"
    ova = "OVA"
    special = "SPECIAL"
    tv = "TV"
    tv_short = "TV_SHORT"


class MediaListSort(Enum):
    """
    Media list sort enums
    """

    added_time = "ADDED_TIME"
    added_time_desc = "ADDED_TIME_DESC"
    finished_on = "FINISHED_ON"
    finished_on_desc = "FINISHED_ON_DESC"
    media_id = "MEDIA_ID"
    media_id_desc = "MEDIA_ID_DESC"
    media_popularity = "MEDIA_POPULARITY"
    media_popularity_desc = "MEDIA_POPULARITY_DESC"
    media_title_english = "MEDIA_TITLE_ENGLISH"
    media_title_english_desc = "MEDIA_TITLE_ENGLISH_DESC"
    media_title_native = "MEDIA_TITLE_NATIVE"
    media_title_native_desc = "MEDIA_TITLE_NATIVE_DESC"
    media_title_romaji = "MEDIA_TITLE_ROMAJI"
    media_title_romaji_desc = "MEDIA_TITLE_ROMAJI_DESC"
    priority = "PRIORITY"
    priority_desc = "PRIORITY_DESC"
    progress = "PROGRESS"
    progress_desc = "PROGRESS_DESC"
    progress_volumes = "PROGRESS_VOLUMES"
    progress_volumes_desc = "PROGRESS_VOLUMES_DESC"
    repeat = "REPEAT"
    repeat_desc = "REPEAT_DESC"
    score = "SCORE"
    score_desc = "SCORE_DESC"
    started_on = "STARTED_ON"
    started_on_desc = "STARTED_ON_DESC"
    status = "STATUS"
    status_desc = "STATUS_DESC"
    updated_time = "UPDATED_TIME"
    updated_time_desc = "UPDATED_TIME_DESC"


class MediaListStatus(Enum):
    """
    Media list watching/reading status enum.
    """

    completed = "COMPLETED"
    current = "CURRENT"
    dropped = "DROPPED"
    paused = "PAUSED"
    planning = "PLANNING"
    repeating = "REPEATING"


class MediaRankType(Enum):
    """
    The type of ranking
    """

    popular = "POPULAR"
    rated = "RATED"


class MediaRelation(Enum):
    """
    Type of relation media has to its parent.
    """

    adaptation = "ADAPTATION"
    alternative = "ALTERNATIVE"
    character = "CHARACTER"
    compilation = "COMPILATION"
    contains = "CONTAINS"
    other = "OTHER"
    parent = "PARENT"
    prequel = "PREQUEL"
    sequel = "SEQUEL"
    side_story = "SIDE_STORY"
    source = "SOURCE"
    spin_off = "SPIN_OFF"
    summary = "SUMMARY"


class MediaSeason(Enum):
    fall = "FALL"
    spring = "SPRING"
    summer = "SUMMER"
    winter = "WINTER"


class MediaSort(Enum):
    """
    Media sort enums
    """

    chapters = "CHAPTERS"
    chapters_desc = "CHAPTERS_DESC"
    duration = "DURATION"
    duration_desc = "DURATION_DESC"
    end_date = "END_DATE"
    end_date_desc = "END_DATE_DESC"
    episodes = "EPISODES"
    episodes_desc = "EPISODES_DESC"
    favourites = "FAVOURITES"
    favourites_desc = "FAVOURITES_DESC"
    format = "FORMAT"
    format_desc = "FORMAT_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    popularity = "POPULARITY"
    popularity_desc = "POPULARITY_DESC"
    score = "SCORE"
    score_desc = "SCORE_DESC"
    search_match = "SEARCH_MATCH"
    start_date = "START_DATE"
    start_date_desc = "START_DATE_DESC"
    status = "STATUS"
    status_desc = "STATUS_DESC"
    title_english = "TITLE_ENGLISH"
    title_english_desc = "TITLE_ENGLISH_DESC"
    title_native = "TITLE_NATIVE"
    title_native_desc = "TITLE_NATIVE_DESC"
    title_romaji = "TITLE_ROMAJI"
    title_romaji_desc = "TITLE_ROMAJI_DESC"
    trending = "TRENDING"
    trending_desc = "TRENDING_DESC"
    type = "TYPE"
    type_desc = "TYPE_DESC"
    updated_at = "UPDATED_AT"
    updated_at_desc = "UPDATED_AT_DESC"
    volumes = "VOLUMES"
    volumes_desc = "VOLUMES_DESC"


class MediaSource(Enum):
    """
    Source type the media was adapted from
    """

    anime = "ANIME"
    comic = "COMIC"
    doujinshi = "DOUJINSHI"
    game = "GAME"
    light_novel = "LIGHT_NOVEL"
    live_action = "LIVE_ACTION"
    manga = "MANGA"
    multimedia_project = "MULTIMEDIA_PROJECT"
    novel = "NOVEL"
    original = "ORIGINAL"
    other = "OTHER"
    picture_book = "PICTURE_BOOK"
    video_game = "VIDEO_GAME"
    visual_novel = "VISUAL_NOVEL"
    web_novel = "WEB_NOVEL"


class MediaStatus(Enum):
    """
    The current releasing status of the media
    """

    cancelled = "CANCELLED"
    finished = "FINISHED"
    hiatus = "HIATUS"
    not_yet_released = "NOT_YET_RELEASED"
    releasing = "RELEASING"


class MediaTrendSort(Enum):
    """
    Media trend sort enums
    """

    date = "DATE"
    date_desc = "DATE_DESC"
    episode = "EPISODE"
    episode_desc = "EPISODE_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    media_id = "MEDIA_ID"
    media_id_desc = "MEDIA_ID_DESC"
    popularity = "POPULARITY"
    popularity_desc = "POPULARITY_DESC"
    score = "SCORE"
    score_desc = "SCORE_DESC"
    trending = "TRENDING"
    trending_desc = "TRENDING_DESC"


class MediaType(Enum):
    """
    Media type enum, anime or manga.
    """

    anime = "ANIME"
    manga = "MANGA"


class ModActionType(Enum):
    anon = "ANON"
    ban = "BAN"
    delete = "DELETE"
    edit = "EDIT"
    expire = "EXPIRE"
    note = "NOTE"
    report = "REPORT"
    reset = "RESET"


class ModRole(Enum):
    """
    Mod role enums
    """

    admin = "ADMIN"
    anime_data = "ANIME_DATA"
    character_data = "CHARACTER_DATA"
    community = "COMMUNITY"
    developer = "DEVELOPER"
    discord_community = "DISCORD_COMMUNITY"
    lead_anime_data = "LEAD_ANIME_DATA"
    lead_community = "LEAD_COMMUNITY"
    lead_developer = "LEAD_DEVELOPER"
    lead_manga_data = "LEAD_MANGA_DATA"
    lead_social_media = "LEAD_SOCIAL_MEDIA"
    manga_data = "MANGA_DATA"
    retired = "RETIRED"
    social_media = "SOCIAL_MEDIA"
    staff_data = "STAFF_DATA"


class NotificationType(Enum):
    """
    Notification type enum
    """

    activity_like = "ACTIVITY_LIKE"
    activity_mention = "ACTIVITY_MENTION"
    activity_message = "ACTIVITY_MESSAGE"
    activity_reply = "ACTIVITY_REPLY"
    activity_reply_like = "ACTIVITY_REPLY_LIKE"
    activity_reply_subscribed = "ACTIVITY_REPLY_SUBSCRIBED"
    airing = "AIRING"
    following = "FOLLOWING"
    media_data_change = "MEDIA_DATA_CHANGE"
    media_deletion = "MEDIA_DELETION"
    media_merge = "MEDIA_MERGE"
    related_media_addition = "RELATED_MEDIA_ADDITION"
    thread_comment_like = "THREAD_COMMENT_LIKE"
    thread_comment_mention = "THREAD_COMMENT_MENTION"
    thread_comment_reply = "THREAD_COMMENT_REPLY"
    thread_like = "THREAD_LIKE"
    thread_subscribed = "THREAD_SUBSCRIBED"


class RecommendationRating(Enum):
    """
    Recommendation rating enums
    """

    no_rating = "NO_RATING"
    rate_down = "RATE_DOWN"
    rate_up = "RATE_UP"


class RecommendationSort(Enum):
    """
    Recommendation sort enums
    """

    id = "ID"
    id_desc = "ID_DESC"
    rating = "RATING"
    rating_desc = "RATING_DESC"


class ReviewRating(Enum):
    """
    Review rating enums
    """

    down_vote = "DOWN_VOTE"
    no_vote = "NO_VOTE"
    up_vote = "UP_VOTE"


class ReviewSort(Enum):
    """
    Review sort enums
    """

    created_at = "CREATED_AT"
    created_at_desc = "CREATED_AT_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    rating = "RATING"
    rating_desc = "RATING_DESC"
    score = "SCORE"
    score_desc = "SCORE_DESC"
    updated_at = "UPDATED_AT"
    updated_at_desc = "UPDATED_AT_DESC"


class RevisionHistoryAction(Enum):
    """
    Revision history actions
    """

    create = "CREATE"
    edit = "EDIT"


class ScoreFormat(Enum):
    """
    Media list scoring type
    """

    point_10 = "POINT_10"
    point_100 = "POINT_100"
    point_10_decimal = "POINT_10_DECIMAL"
    point_3 = "POINT_3"
    point_5 = "POINT_5"


class SiteTrendSort(Enum):
    """
    Site trend sort enums
    """

    change = "CHANGE"
    change_desc = "CHANGE_DESC"
    count = "COUNT"
    count_desc = "COUNT_DESC"
    date = "DATE"
    date_desc = "DATE_DESC"


class StaffLanguage(Enum):
    """
    The primary language of the voice actor
    """

    english = "ENGLISH"
    french = "FRENCH"
    german = "GERMAN"
    hebrew = "HEBREW"
    hungarian = "HUNGARIAN"
    italian = "ITALIAN"
    japanese = "JAPANESE"
    korean = "KOREAN"
    portuguese = "PORTUGUESE"
    spanish = "SPANISH"


class StaffSort(Enum):
    """
    Staff sort enums
    """

    favourites = "FAVOURITES"
    favourites_desc = "FAVOURITES_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    language = "LANGUAGE"
    language_desc = "LANGUAGE_DESC"
    relevance = "RELEVANCE"
    role = "ROLE"
    role_desc = "ROLE_DESC"
    search_match = "SEARCH_MATCH"


class StudioSort(Enum):
    """
    Studio sort enums
    """

    favourites = "FAVOURITES"
    favourites_desc = "FAVOURITES_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    name = "NAME"
    name_desc = "NAME_DESC"
    search_match = "SEARCH_MATCH"


class SubmissionSort(Enum):
    """
    Submission sort enums
    """

    id = "ID"
    id_desc = "ID_DESC"


class SubmissionStatus(Enum):
    """
    Submission status
    """

    accepted = "ACCEPTED"
    partially_accepted = "PARTIALLY_ACCEPTED"
    pending = "PENDING"
    rejected = "REJECTED"


class ThreadCommentSort(Enum):
    """
    Thread comments sort enums
    """

    id = "ID"
    id_desc = "ID_DESC"


class ThreadSort(Enum):
    """
    Thread sort enums
    """

    created_at = "CREATED_AT"
    created_at_desc = "CREATED_AT_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    is_sticky = "IS_STICKY"
    replied_at = "REPLIED_AT"
    replied_at_desc = "REPLIED_AT_DESC"
    reply_count = "REPLY_COUNT"
    reply_count_desc = "REPLY_COUNT_DESC"
    search_match = "SEARCH_MATCH"
    title = "TITLE"
    title_desc = "TITLE_DESC"
    updated_at = "UPDATED_AT"
    updated_at_desc = "UPDATED_AT_DESC"
    view_count = "VIEW_COUNT"
    view_count_desc = "VIEW_COUNT_DESC"


class UserSort(Enum):
    """
    User sort enums
    """

    chapters_read = "CHAPTERS_READ"
    chapters_read_desc = "CHAPTERS_READ_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    search_match = "SEARCH_MATCH"
    username = "USERNAME"
    username_desc = "USERNAME_DESC"
    watched_time = "WATCHED_TIME"
    watched_time_desc = "WATCHED_TIME_DESC"


class UserStaffNameLanguage(Enum):
    """
    The language the user wants to see staff and character names in
    """

    native = "NATIVE"
    romaji = "ROMAJI"
    romaji_western = "ROMAJI_WESTERN"


class UserStatisticsSort(Enum):
    """
    User statistics sort enum
    """

    count = "COUNT"
    count_desc = "COUNT_DESC"
    id = "ID"
    id_desc = "ID_DESC"
    mean_score = "MEAN_SCORE"
    mean_score_desc = "MEAN_SCORE_DESC"
    progress = "PROGRESS"
    progress_desc = "PROGRESS_DESC"


class UserTitleLanguage(Enum):
    """
    The language the user wants to see media titles in
    """

    english = "ENGLISH"
    english_stylised = "ENGLISH_STYLISED"
    native = "NATIVE"
    native_stylised = "NATIVE_STYLISED"
    romaji = "ROMAJI"
    romaji_stylised = "ROMAJI_STYLISED"


class ActivityLikeNotification(BaseModel):
    """
    Notification for when a activity is liked
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity: ActivityUnion | None = Field(None, description="The liked activity")
    activity_id: Int = Field(
        ..., alias="activityId", description="The id of the activity which was liked"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who liked the activity")
    user_id: Int = Field(
        ..., alias="userId", description="The id of the user who liked to the activity"
    )
    typename__: Literal["ActivityLikeNotification"] | None = Field(
        "ActivityLikeNotification", alias="__typename"
    )


class ActivityMentionNotification(BaseModel):
    """
    Notification for when authenticated user is @ mentioned in activity or reply
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity: ActivityUnion | None = Field(None, description="The liked activity")
    activity_id: Int = Field(
        ..., alias="activityId", description="The id of the activity where mentioned"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(
        None, description="The user who mentioned the authenticated user"
    )
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who mentioned the authenticated user",
    )
    typename__: Literal["ActivityMentionNotification"] | None = Field(
        "ActivityMentionNotification", alias="__typename"
    )


class ActivityMessageNotification(BaseModel):
    """
    Notification for when a user is send an activity message
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity_id: Int = Field(
        ..., alias="activityId", description="The id of the activity message"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    message: MessageActivity | None = Field(None, description="The message activity")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who sent the message")
    user_id: Int = Field(
        ..., alias="userId", description="The if of the user who send the message"
    )
    typename__: Literal["ActivityMessageNotification"] | None = Field(
        "ActivityMessageNotification", alias="__typename"
    )


class ActivityReply(BaseModel):
    """
    Replay to an activity item
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity_id: Int | None = Field(
        None, alias="activityId", description="The id of the parent activity"
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time the reply was created at"
    )
    id: Int = Field(..., description="The id of the reply")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the reply",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the reply has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the reply"
    )
    text: String | None = Field(None, description="The reply text")
    user: User | None = Field(None, description="The user who created reply")
    user_id: Int | None = Field(
        None, alias="userId", description="The id of the replies creator"
    )
    typename__: Literal["ActivityReply"] | None = Field(
        "ActivityReply", alias="__typename"
    )


class ActivityReplyLikeNotification(BaseModel):
    """
    Notification for when a activity reply is liked
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity: ActivityUnion | None = Field(None, description="The liked activity")
    activity_id: Int = Field(
        ...,
        alias="activityId",
        description="The id of the activity where the reply which was liked",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who liked the activity reply")
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who liked to the activity reply",
    )
    typename__: Literal["ActivityReplyLikeNotification"] | None = Field(
        "ActivityReplyLikeNotification", alias="__typename"
    )


class ActivityReplyNotification(BaseModel):
    """
    Notification for when a user replies to the authenticated users activity
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity: ActivityUnion | None = Field(None, description="The liked activity")
    activity_id: Int = Field(
        ...,
        alias="activityId",
        description="The id of the activity which was replied too",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who replied to the activity")
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who replied to the activity",
    )
    typename__: Literal["ActivityReplyNotification"] | None = Field(
        "ActivityReplyNotification", alias="__typename"
    )


class ActivityReplySubscribedNotification(BaseModel):
    """
    Notification for when a user replies to activity the authenticated user has replied to
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity: ActivityUnion | None = Field(None, description="The liked activity")
    activity_id: Int = Field(
        ...,
        alias="activityId",
        description="The id of the activity which was replied too",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who replied to the activity")
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who replied to the activity",
    )
    typename__: Literal["ActivityReplySubscribedNotification"] | None = Field(
        "ActivityReplySubscribedNotification", alias="__typename"
    )


class AiringNotification(BaseModel):
    """
    Notification for when an episode of anime airs
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    anime_id: Int = Field(..., alias="animeId", description="The id of the aired anime")
    contexts: list[String | None] | None = Field(
        None, description="The notification context text"
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    episode: Int = Field(..., description="The episode number that just aired")
    id: Int = Field(..., description="The id of the Notification")
    media: Media | None = Field(
        None, description="The associated media of the airing schedule"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["AiringNotification"] | None = Field(
        "AiringNotification", alias="__typename"
    )


class AiringProgression(BaseModel):
    """
    Score & Watcher stats for airing anime by episode and mid-week
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    episode: Float | None = Field(
        None,
        description="The episode the stats were recorded at. .5 is the mid point between 2 episodes airing dates.",
    )
    score: Float | None = Field(None, description="The average score for the media")
    watching: Int | None = Field(
        None, description="The amount of users watching the anime"
    )
    typename__: Literal["AiringProgression"] | None = Field(
        "AiringProgression", alias="__typename"
    )


class AiringSchedule(BaseModel):
    """
    Media Airing Schedule. NOTE: We only aim to guarantee that FUTURE airing data is present and accurate.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    airing_at: Int = Field(
        ..., alias="airingAt", description="The time the episode airs at"
    )
    episode: Int = Field(..., description="The airing episode number")
    id: Int = Field(..., description="The id of the airing schedule item")
    media: Media | None = Field(
        None, description="The associate media of the airing episode"
    )
    media_id: Int = Field(
        ..., alias="mediaId", description="The associate media id of the airing episode"
    )
    time_until_airing: Int = Field(
        ..., alias="timeUntilAiring", description="Seconds until episode starts airing"
    )
    typename__: Literal["AiringSchedule"] | None = Field(
        "AiringSchedule", alias="__typename"
    )


class AiringScheduleConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[AiringScheduleEdge | None] | None = None
    nodes: list[AiringSchedule | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["AiringScheduleConnection"] | None = Field(
        "AiringScheduleConnection", alias="__typename"
    )


class AiringScheduleEdge(BaseModel):
    """
    AiringSchedule connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int | None = Field(None, description="The id of the connection")
    node: AiringSchedule | None = None
    typename__: Literal["AiringScheduleEdge"] | None = Field(
        "AiringScheduleEdge", alias="__typename"
    )


class AniChartUser(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    highlights: Json | None = None
    settings: Json | None = None
    user: User | None = None
    typename__: Literal["AniChartUser"] | None = Field(
        "AniChartUser", alias="__typename"
    )


class Character(BaseModel):
    """
    A character that features in an anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    age: String | None = Field(
        None,
        description="The character's age. Note this is a string, not an int, it may contain further text and additional ages.",
    )
    blood_type: String | None = Field(
        None, alias="bloodType", description="The characters blood type"
    )
    date_of_birth: FuzzyDate | None = Field(
        None, alias="dateOfBirth", description="The character's birth date"
    )
    description: String | None = Field(
        None, description="A general description of the character"
    )
    favourites: Int | None = Field(
        None, description="The amount of user's who have favourited the character"
    )
    gender: String | None = Field(
        None,
        description="The character's gender. Usually Male, Female, or Non-binary but can be any string.",
    )
    id: Int = Field(..., description="The id of the character")
    image: CharacterImage | None = Field(None, description="Character images")
    is_favourite: Boolean = Field(
        ...,
        alias="isFavourite",
        description="If the character is marked as favourite by the currently authenticated user",
    )
    is_favourite_blocked: Boolean = Field(
        ...,
        alias="isFavouriteBlocked",
        description="If the character is blocked from being added to favourites",
    )
    media: MediaConnection | None = Field(
        None, description="Media that includes the character"
    )
    mod_notes: String | None = Field(
        None, alias="modNotes", description="Notes for site moderators"
    )
    name: CharacterName | None = Field(None, description="The names of the character")
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the character page on the AniList website",
    )
    updated_at: Int | None = Field(None, alias="updatedAt")
    typename__: Literal["Character"] | None = Field("Character", alias="__typename")


class CharacterConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[CharacterEdge | None] | None = None
    nodes: list[Character | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["CharacterConnection"] | None = Field(
        "CharacterConnection", alias="__typename"
    )


class CharacterEdge(BaseModel):
    """
    Character connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    favourite_order: Int | None = Field(
        None,
        alias="favouriteOrder",
        description="The order the character should be displayed from the users favourites",
    )
    id: Int | None = Field(None, description="The id of the connection")
    media: list[Media | None] | None = Field(
        None, description="The media the character is in"
    )
    name: String | None = Field(None, description="Media specific character name")
    node: Character | None = None
    role: CharacterRole | None = Field(
        None, description="The characters role in the media"
    )
    voice_actor_roles: list[StaffRoleType | None] | None = Field(
        None,
        alias="voiceActorRoles",
        description="The voice actors of the character with role date",
    )
    voice_actors: list[Staff | None] | None = Field(
        None, alias="voiceActors", description="The voice actors of the character"
    )
    typename__: Literal["CharacterEdge"] | None = Field(
        "CharacterEdge", alias="__typename"
    )


class CharacterImage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    large: String | None = Field(
        None, description="The character's image of media at its largest size"
    )
    medium: String | None = Field(
        None, description="The character's image of media at medium size"
    )
    typename__: Literal["CharacterImage"] | None = Field(
        "CharacterImage", alias="__typename"
    )


class CharacterName(BaseModel):
    """
    The names of the character
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alternative: list[String | None] | None = Field(
        None, description="Other names the character might be referred to as"
    )
    alternative_spoiler: list[String | None] | None = Field(
        None,
        alias="alternativeSpoiler",
        description="Other names the character might be referred to as but are spoilers",
    )
    first: String | None = Field(None, description="The character's given name")
    full: String | None = Field(None, description="The character's first and last name")
    last: String | None = Field(None, description="The character's surname")
    middle: String | None = Field(None, description="The character's middle name")
    native: String | None = Field(
        None, description="The character's full name in their native language"
    )
    user_preferred: String | None = Field(
        None,
        alias="userPreferred",
        description="The currently authenticated users preferred name language. Default romaji for non-authenticated",
    )
    typename__: Literal["CharacterName"] | None = Field(
        "CharacterName", alias="__typename"
    )


class CharacterSubmission(BaseModel):
    """
    A submission for a character that features in an anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    assignee: User | None = Field(
        None, description="Data Mod assigned to handle the submission"
    )
    character: Character | None = Field(
        None, description="Character that the submission is referencing"
    )
    created_at: Int | None = Field(None, alias="createdAt")
    id: Int = Field(..., description="The id of the submission")
    locked: Boolean | None = Field(None, description="Whether the submission is locked")
    notes: String | None = Field(None, description="Inner details of submission status")
    source: String | None = None
    status: SubmissionStatus | None = Field(
        None, description="Status of the submission"
    )
    submission: Character | None = Field(
        None, description="The character submission changes"
    )
    submitter: User | None = Field(None, description="Submitter for the submission")
    typename__: Literal["CharacterSubmission"] | None = Field(
        "CharacterSubmission", alias="__typename"
    )


class CharacterSubmissionConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[CharacterSubmissionEdge | None] | None = None
    nodes: list[CharacterSubmission | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["CharacterSubmissionConnection"] | None = Field(
        "CharacterSubmissionConnection", alias="__typename"
    )


class CharacterSubmissionEdge(BaseModel):
    """
    CharacterSubmission connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: CharacterSubmission | None = None
    role: CharacterRole | None = Field(
        None, description="The characters role in the media"
    )
    submitted_voice_actors: list[StaffSubmission | None] | None = Field(
        None,
        alias="submittedVoiceActors",
        description="The submitted voice actors of the character",
    )
    voice_actors: list[Staff | None] | None = Field(
        None, alias="voiceActors", description="The voice actors of the character"
    )
    typename__: Literal["CharacterSubmissionEdge"] | None = Field(
        "CharacterSubmissionEdge", alias="__typename"
    )


class Deleted(BaseModel):
    """
    Deleted data type
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    deleted: Boolean | None = Field(
        None, description="If an item has been successfully deleted"
    )
    typename__: Literal["Deleted"] | None = Field("Deleted", alias="__typename")


class Favourites(BaseModel):
    """
    User's favourite anime, manga, characters, staff & studios
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    anime: MediaConnection | None = Field(None, description="Favourite anime")
    characters: CharacterConnection | None = Field(
        None, description="Favourite characters"
    )
    manga: MediaConnection | None = Field(None, description="Favourite manga")
    staff: StaffConnection | None = Field(None, description="Favourite staff")
    studios: StudioConnection | None = Field(None, description="Favourite studios")
    typename__: Literal["Favourites"] | None = Field("Favourites", alias="__typename")


class FollowingNotification(BaseModel):
    """
    Notification for when the authenticated user is followed by another user
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The liked activity")
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who followed the authenticated user",
    )
    typename__: Literal["FollowingNotification"] | None = Field(
        "FollowingNotification", alias="__typename"
    )


class FormatStats(BaseModel):
    """
    User's format statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    format: MediaFormat | None = None
    typename__: Literal["FormatStats"] | None = Field("FormatStats", alias="__typename")


class FuzzyDate(BaseModel):
    """
    Date object that allows for incomplete date values (fuzzy)
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    day: Int | None = Field(None, description="Numeric Day (24)")
    month: Int | None = Field(None, description="Numeric Month (3)")
    year: Int | None = Field(None, description="Numeric Year (2017)")
    typename__: Literal["FuzzyDate"] | None = Field("FuzzyDate", alias="__typename")


class GenreStats(BaseModel):
    """
    User's genre statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    genre: String | None = None
    mean_score: Int | None = Field(None, alias="meanScore")
    time_watched: Int | None = Field(
        None,
        alias="timeWatched",
        description="The amount of time in minutes the genre has been watched by the user",
    )
    typename__: Literal["GenreStats"] | None = Field("GenreStats", alias="__typename")


class InternalPage(BaseModel):
    """
    Page of data (Used for internal use only)
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activities: list[ActivityUnion | None] | None = None
    activity_replies: list[ActivityReply | None] | None = Field(
        None, alias="activityReplies"
    )
    airing_schedules: list[AiringSchedule | None] | None = Field(
        None, alias="airingSchedules"
    )
    character_submissions: list[CharacterSubmission | None] | None = Field(
        None, alias="characterSubmissions"
    )
    characters: list[Character | None] | None = None
    followers: list[User | None] | None = None
    following: list[User | None] | None = None
    likes: list[User | None] | None = None
    media: list[Media | None] | None = None
    media_list: list[MediaList | None] | None = Field(None, alias="mediaList")
    media_submissions: list[MediaSubmission | None] | None = Field(
        None, alias="mediaSubmissions"
    )
    media_trends: list[MediaTrend | None] | None = Field(None, alias="mediaTrends")
    mod_actions: list[ModAction | None] | None = Field(None, alias="modActions")
    notifications: list[NotificationUnion | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    recommendations: list[Recommendation | None] | None = None
    reports: list[Report | None] | None = None
    reviews: list[Review | None] | None = None
    revision_history: list[RevisionHistory | None] | None = Field(
        None, alias="revisionHistory"
    )
    staff: list[Staff | None] | None = None
    staff_submissions: list[StaffSubmission | None] | None = Field(
        None, alias="staffSubmissions"
    )
    studios: list[Studio | None] | None = None
    thread_comments: list[ThreadComment | None] | None = Field(
        None, alias="threadComments"
    )
    threads: list[Thread | None] | None = None
    user_block_search: list[User | None] | None = Field(None, alias="userBlockSearch")
    users: list[User | None] | None = None
    typename__: Literal["InternalPage"] | None = Field(
        "InternalPage", alias="__typename"
    )


class ListActivity(BaseModel):
    """
    User list activity (anime & manga updates)
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time the activity was created at"
    )
    id: Int = Field(..., description="The id of the activity")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the activity",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="If the activity is locked and can receive replies",
    )
    is_pinned: Boolean | None = Field(
        None,
        alias="isPinned",
        description="If the activity is pinned to the top of the users activity feed",
    )
    is_subscribed: Boolean | None = Field(
        None,
        alias="isSubscribed",
        description="If the currently authenticated user is subscribed to the activity",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the activity has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the activity"
    )
    media: Media | None = Field(
        None, description="The associated media to the activity update"
    )
    progress: String | None = Field(None, description="The list progress made")
    replies: list[ActivityReply | None] | None = Field(
        None, description="The written replies to the activity"
    )
    reply_count: Int = Field(
        ..., alias="replyCount", description="The number of activity replies"
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the activity page on the AniList website",
    )
    status: String | None = Field(None, description="The list item's textual status")
    type: ActivityType | None = Field(None, description="The type of activity")
    user: User | None = Field(None, description="The owner of the activity")
    user_id: Int | None = Field(
        None, alias="userId", description="The user id of the activity's creator"
    )
    typename__: Literal["ListActivity"] | None = Field(
        "ListActivity", alias="__typename"
    )


class ListActivityOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    disabled: Boolean | None = None
    type: MediaListStatus | None = None
    typename__: Literal["ListActivityOption"] | None = Field(
        "ListActivityOption", alias="__typename"
    )


class ListScoreStats(BaseModel):
    """
    User's list score statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    mean_score: Int | None = Field(None, alias="meanScore")
    standard_deviation: Int | None = Field(None, alias="standardDeviation")
    typename__: Literal["ListScoreStats"] | None = Field(
        "ListScoreStats", alias="__typename"
    )


class Media(BaseModel):
    """
    Anime or Manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    airing_schedule: AiringScheduleConnection | None = Field(
        None, alias="airingSchedule", description="The media's entire airing schedule"
    )
    auto_create_forum_thread: Boolean | None = Field(
        None,
        alias="autoCreateForumThread",
        description="If the media should have forum thread automatically created for it on airing episode release",
    )
    average_score: Int | None = Field(
        None,
        alias="averageScore",
        description="A weighted average score of all the user's scores of the media",
    )
    banner_image: String | None = Field(
        None, alias="bannerImage", description="The banner image of the media"
    )
    chapters: Int | None = Field(
        None, description="The amount of chapters the manga has when complete"
    )
    characters: CharacterConnection | None = Field(
        None, description="The characters in the media"
    )
    country_of_origin: CountryCode | None = Field(
        None,
        alias="countryOfOrigin",
        description="Where the media was created. (ISO 3166-1 alpha-2)",
    )
    cover_image: MediaCoverImage | None = Field(
        None, alias="coverImage", description="The cover images of the media"
    )
    description: String | None = Field(
        None, description="Short description of the media's story and characters"
    )
    duration: Int | None = Field(
        None, description="The general length of each anime episode in minutes"
    )
    end_date: FuzzyDate | None = Field(
        None, alias="endDate", description="The last official release date of the media"
    )
    episodes: Int | None = Field(
        None, description="The amount of episodes the anime has when complete"
    )
    external_links: list[MediaExternalLink | None] | None = Field(
        None,
        alias="externalLinks",
        description="External links to another site related to the media",
    )
    favourites: Int | None = Field(
        None, description="The amount of user's who have favourited the media"
    )
    format: MediaFormat | None = Field(
        None, description="The format the media was released in"
    )
    genres: list[String | None] | None = Field(
        None, description="The genres of the media"
    )
    hashtag: String | None = Field(
        None, description="Official Twitter hashtags for the media"
    )
    id: Int = Field(..., description="The id of the media")
    id_mal: Int | None = Field(
        None, alias="idMal", description="The mal id of the media"
    )
    is_adult: Boolean | None = Field(
        None,
        alias="isAdult",
        description="If the media is intended only for 18+ adult audiences",
    )
    is_favourite: Boolean = Field(
        ...,
        alias="isFavourite",
        description="If the media is marked as favourite by the current authenticated user",
    )
    is_favourite_blocked: Boolean = Field(
        ...,
        alias="isFavouriteBlocked",
        description="If the media is blocked from being added to favourites",
    )
    is_licensed: Boolean | None = Field(
        None,
        alias="isLicensed",
        description="If the media is officially licensed or a self-published doujin release",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="Locked media may not be added to lists our favorited. This may be due to the entry pending for deletion or other reasons.",
    )
    is_recommendation_blocked: Boolean | None = Field(
        None,
        alias="isRecommendationBlocked",
        description="If the media is blocked from being recommended to/from",
    )
    is_review_blocked: Boolean | None = Field(
        None,
        alias="isReviewBlocked",
        description="If the media is blocked from being reviewed",
    )
    mean_score: Int | None = Field(
        None,
        alias="meanScore",
        description="Mean score of all the user's scores of the media",
    )
    media_list_entry: MediaList | None = Field(
        None,
        alias="mediaListEntry",
        description="The authenticated user's media list entry for the media",
    )
    mod_notes: String | None = Field(
        None, alias="modNotes", description="Notes for site moderators"
    )
    next_airing_episode: AiringSchedule | None = Field(
        None,
        alias="nextAiringEpisode",
        description="The media's next episode airing schedule",
    )
    popularity: Int | None = Field(
        None, description="The number of users with the media on their list"
    )
    rankings: list[MediaRank | None] | None = Field(
        None,
        description="The ranking of the media in a particular time span and format compared to other media",
    )
    recommendations: RecommendationConnection | None = Field(
        None, description="User recommendations for similar media"
    )
    relations: MediaConnection | None = Field(
        None, description="Other media in the same or connecting franchise"
    )
    reviews: ReviewConnection | None = Field(
        None, description="User reviews of the media"
    )
    season: MediaSeason | None = Field(
        None, description="The season the media was initially released in"
    )
    season_int: Int | None = Field(
        None,
        alias="seasonInt",
        description="The year & season the media was initially released in",
    )
    season_year: Int | None = Field(
        None,
        alias="seasonYear",
        description="The season year the media was initially released in",
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the media page on the AniList website",
    )
    source: MediaSource | None = Field(
        None, description="Source type the media was adapted from."
    )
    staff: StaffConnection | None = Field(
        None, description="The staff who produced the media"
    )
    start_date: FuzzyDate | None = Field(
        None,
        alias="startDate",
        description="The first official release date of the media",
    )
    stats: MediaStats | None = None
    status: MediaStatus | None = Field(
        None, description="The current releasing status of the media"
    )
    streaming_episodes: list[MediaStreamingEpisode | None] | None = Field(
        None,
        alias="streamingEpisodes",
        description="Data and links to legal streaming episodes on external sites",
    )
    studios: StudioConnection | None = Field(
        None, description="The companies who produced the media"
    )
    synonyms: list[String | None] | None = Field(
        None, description="Alternative titles of the media"
    )
    tags: list[MediaTag | None] | None = Field(
        None, description="List of tags that describes elements and themes of the media"
    )
    title: MediaTitle | None = Field(
        None, description="The official titles of the media in various languages"
    )
    trailer: MediaTrailer | None = Field(
        None, description="Media trailer or advertisement"
    )
    trending: Int | None = Field(
        None, description="The amount of related activity in the past hour"
    )
    trends: MediaTrendConnection | None = Field(
        None, description="The media's daily trend stats"
    )
    type: MediaType | None = Field(
        None, description="The type of the media; anime or manga"
    )
    updated_at: Int | None = Field(
        None, alias="updatedAt", description="When the media's data was last updated"
    )
    volumes: Int | None = Field(
        None, description="The amount of volumes the manga has when complete"
    )
    typename__: Literal["Media"] | None = Field("Media", alias="__typename")


class MediaCharacter(BaseModel):
    """
    Internal - Media characters separated
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    character: Character | None = Field(
        None, description="The characters in the media voiced by the parent actor"
    )
    character_name: String | None = Field(
        None, alias="characterName", description="Media specific character name"
    )
    dub_group: String | None = Field(None, alias="dubGroup")
    id: Int | None = Field(None, description="The id of the connection")
    role: CharacterRole | None = Field(
        None, description="The characters role in the media"
    )
    role_notes: String | None = Field(None, alias="roleNotes")
    voice_actor: Staff | None = Field(
        None, alias="voiceActor", description="The voice actor of the character"
    )
    typename__: Literal["MediaCharacter"] | None = Field(
        "MediaCharacter", alias="__typename"
    )


class MediaConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[MediaEdge | None] | None = None
    nodes: list[Media | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["MediaConnection"] | None = Field(
        "MediaConnection", alias="__typename"
    )


class MediaCoverImage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    color: String | None = Field(None, description="Average #hex color of cover image")
    extra_large: String | None = Field(
        None,
        alias="extraLarge",
        description="The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.",
    )
    large: String | None = Field(
        None, description="The cover image url of the media at a large size"
    )
    medium: String | None = Field(
        None, description="The cover image url of the media at medium size"
    )
    typename__: Literal["MediaCoverImage"] | None = Field(
        "MediaCoverImage", alias="__typename"
    )


class MediaDataChangeNotification(BaseModel):
    """
    Notification for when a media entry's data was changed in a significant way impacting users' list tracking
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    context: String | None = Field(
        None, description="The reason for the media data change"
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    media: Media | None = Field(
        None, description="The media that received data changes"
    )
    media_id: Int = Field(
        ...,
        alias="mediaId",
        description="The id of the media that received data changes",
    )
    reason: String | None = Field(
        None, description="The reason for the media data change"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["MediaDataChangeNotification"] | None = Field(
        "MediaDataChangeNotification", alias="__typename"
    )


class MediaDeletionNotification(BaseModel):
    """
    Notification for when a media tracked in a user's list is deleted from the site
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    context: String | None = Field(
        None, description="The reason for the media deletion"
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    deleted_media_title: String | None = Field(
        None, alias="deletedMediaTitle", description="The title of the deleted media"
    )
    id: Int = Field(..., description="The id of the Notification")
    reason: String | None = Field(None, description="The reason for the media deletion")
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["MediaDeletionNotification"] | None = Field(
        "MediaDeletionNotification", alias="__typename"
    )


class MediaEdge(BaseModel):
    """
    Media connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    character_name: String | None = Field(
        None, alias="characterName", description="Media specific character name"
    )
    character_role: CharacterRole | None = Field(
        None, alias="characterRole", description="The characters role in the media"
    )
    characters: list[Character | None] | None = Field(
        None, description="The characters in the media voiced by the parent actor"
    )
    dub_group: String | None = Field(
        None,
        alias="dubGroup",
        description="Used for grouping roles where multiple dubs exist for the same language. Either dubbing company name or language variant.",
    )
    favourite_order: Int | None = Field(
        None,
        alias="favouriteOrder",
        description="The order the media should be displayed from the users favourites",
    )
    id: Int | None = Field(None, description="The id of the connection")
    is_main_studio: Boolean = Field(
        ...,
        alias="isMainStudio",
        description="If the studio is the main animation studio of the media (For Studio->MediaConnection field only)",
    )
    node: Media | None = None
    relation_type: MediaRelation | None = Field(
        None,
        alias="relationType",
        description="The type of relation to the parent model",
    )
    role_notes: String | None = Field(
        None,
        alias="roleNotes",
        description="Notes regarding the VA's role for the character",
    )
    staff_role: String | None = Field(
        None,
        alias="staffRole",
        description="The role of the staff member in the production of the media",
    )
    voice_actor_roles: list[StaffRoleType | None] | None = Field(
        None,
        alias="voiceActorRoles",
        description="The voice actors of the character with role date",
    )
    voice_actors: list[Staff | None] | None = Field(
        None, alias="voiceActors", description="The voice actors of the character"
    )
    typename__: Literal["MediaEdge"] | None = Field("MediaEdge", alias="__typename")


class MediaExternalLink(BaseModel):
    """
    An external link to another site related to the media or staff member
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    color: String | None = None
    icon: String | None = Field(
        None,
        description="The icon image url of the site. Not available for all links. Transparent PNG 64x64",
    )
    id: Int = Field(..., description="The id of the external link")
    is_disabled: Boolean | None = Field(None, alias="isDisabled")
    language: String | None = Field(
        None,
        description="Language the site content is in. See Staff language field for values.",
    )
    notes: String | None = None
    site: String = Field(..., description="The links website site name")
    site_id: Int | None = Field(
        None, alias="siteId", description="The links website site id"
    )
    type: ExternalLinkType | None = None
    url: String | None = Field(
        None, description="The url of the external link or base url of link source"
    )
    typename__: Literal["MediaExternalLink"] | None = Field(
        "MediaExternalLink", alias="__typename"
    )


class MediaList(BaseModel):
    """
    List of anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    advanced_scores: Json | None = Field(
        None,
        alias="advancedScores",
        description="Map of advanced scores with name keys",
    )
    completed_at: FuzzyDate | None = Field(
        None,
        alias="completedAt",
        description="When the entry was completed by the user",
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="When the entry data was created"
    )
    custom_lists: Json | None = Field(
        None,
        alias="customLists",
        description="Map of booleans for which custom lists the entry are in",
    )
    hidden_from_status_lists: Boolean | None = Field(
        None,
        alias="hiddenFromStatusLists",
        description="If the entry shown be hidden from non-custom lists",
    )
    id: Int = Field(..., description="The id of the list entry")
    media: Media | None = None
    media_id: Int = Field(..., alias="mediaId", description="The id of the media")
    notes: String | None = Field(None, description="Text notes")
    priority: Int | None = Field(None, description="Priority of planning")
    private: Boolean | None = Field(
        None, description="If the entry should only be visible to authenticated user"
    )
    progress: Int | None = Field(
        None, description="The amount of episodes/chapters consumed by the user"
    )
    progress_volumes: Int | None = Field(
        None,
        alias="progressVolumes",
        description="The amount of volumes read by the user",
    )
    repeat: Int | None = Field(
        None, description="The amount of times the user has rewatched/read the media"
    )
    score: Float | None = Field(None, description="The score of the entry")
    started_at: FuzzyDate | None = Field(
        None, alias="startedAt", description="When the entry was started by the user"
    )
    status: MediaListStatus | None = Field(
        None, description="The watching/reading status"
    )
    updated_at: Int | None = Field(
        None, alias="updatedAt", description="When the entry data was last updated"
    )
    user: User | None = None
    user_id: Int = Field(
        ..., alias="userId", description="The id of the user owner of the list entry"
    )
    typename__: Literal["MediaList"] | None = Field("MediaList", alias="__typename")


class MediaListCollection(BaseModel):
    """
    List of anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    custom_lists: list[list[MediaList | None] | None] | None = Field(
        None,
        alias="customLists",
        description="A map of media list entry arrays grouped by custom lists",
    )
    has_next_chunk: Boolean | None = Field(
        None, alias="hasNextChunk", description="If there is another chunk"
    )
    lists: list[MediaListGroup | None] | None = Field(
        None, description="Grouped media list entries"
    )
    status_lists: list[list[MediaList | None] | None] | None = Field(
        None,
        alias="statusLists",
        description="A map of media list entry arrays grouped by status",
    )
    user: User | None = Field(None, description="The owner of the list")
    typename__: Literal["MediaListCollection"] | None = Field(
        "MediaListCollection", alias="__typename"
    )


class MediaListGroup(BaseModel):
    """
    List group of anime or manga entries
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    entries: list[MediaList | None] | None = Field(
        None, description="Media list entries"
    )
    is_custom_list: Boolean | None = Field(None, alias="isCustomList")
    is_split_completed_list: Boolean | None = Field(None, alias="isSplitCompletedList")
    name: String | None = None
    status: MediaListStatus | None = None
    typename__: Literal["MediaListGroup"] | None = Field(
        "MediaListGroup", alias="__typename"
    )


class MediaListOptions(BaseModel):
    """
    A user's list options
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    anime_list: MediaListTypeOptions | None = Field(
        None, alias="animeList", description="The user's anime list options"
    )
    manga_list: MediaListTypeOptions | None = Field(
        None, alias="mangaList", description="The user's manga list options"
    )
    row_order: String | None = Field(
        None,
        alias="rowOrder",
        description="The default order list rows should be displayed in",
    )
    score_format: ScoreFormat | None = Field(
        None,
        alias="scoreFormat",
        description="The score format the user is using for media lists",
    )
    shared_theme: Json | None = Field(
        None, alias="sharedTheme", description="The list theme options for both lists"
    )
    shared_theme_enabled: Boolean | None = Field(
        None,
        alias="sharedThemeEnabled",
        description="If the shared theme should be used instead of the individual list themes",
    )
    use_legacy_lists: Boolean | None = Field(None, alias="useLegacyLists")
    typename__: Literal["MediaListOptions"] | None = Field(
        "MediaListOptions", alias="__typename"
    )


class MediaListTypeOptions(BaseModel):
    """
    A user's list options for anime or manga lists
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    advanced_scoring: list[String | None] | None = Field(
        None,
        alias="advancedScoring",
        description="The names of the user's advanced scoring sections",
    )
    advanced_scoring_enabled: Boolean | None = Field(
        None,
        alias="advancedScoringEnabled",
        description="If advanced scoring is enabled",
    )
    custom_lists: list[String | None] | None = Field(
        None, alias="customLists", description="The names of the user's custom lists"
    )
    section_order: list[String | None] | None = Field(
        None,
        alias="sectionOrder",
        description="The order each list should be displayed in",
    )
    split_completed_section_by_format: Boolean | None = Field(
        None,
        alias="splitCompletedSectionByFormat",
        description="If the completed sections of the list should be separated by format",
    )
    theme: Json | None = Field(None, description="The list theme options")
    typename__: Literal["MediaListTypeOptions"] | None = Field(
        "MediaListTypeOptions", alias="__typename"
    )


class MediaMergeNotification(BaseModel):
    """
    Notification for when a media entry is merged into another for a user who had it on their list
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    context: String | None = Field(
        None, description="The reason for the media data change"
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    deleted_media_titles: list[String | None] | None = Field(
        None, alias="deletedMediaTitles", description="The title of the deleted media"
    )
    id: Int = Field(..., description="The id of the Notification")
    media: Media | None = Field(None, description="The media that was merged into")
    media_id: Int = Field(
        ..., alias="mediaId", description="The id of the media that was merged into"
    )
    reason: String | None = Field(None, description="The reason for the media merge")
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["MediaMergeNotification"] | None = Field(
        "MediaMergeNotification", alias="__typename"
    )


class MediaRank(BaseModel):
    """
    The ranking of a media in a particular time span and format compared to other media
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    all_time: Boolean | None = Field(
        None,
        alias="allTime",
        description="If the ranking is based on all time instead of a season/year",
    )
    context: String = Field(
        ..., description="String that gives context to the ranking type and time span"
    )
    format: MediaFormat = Field(
        ..., description="The format the media is ranked within"
    )
    id: Int = Field(..., description="The id of the rank")
    rank: Int = Field(..., description="The numerical rank of the media")
    season: MediaSeason | None = Field(
        None, description="The season the media is ranked within"
    )
    type: MediaRankType = Field(..., description="The type of ranking")
    year: Int | None = Field(None, description="The year the media is ranked within")
    typename__: Literal["MediaRank"] | None = Field("MediaRank", alias="__typename")


class MediaStats(BaseModel):
    """
    A media's statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    airing_progression: list[AiringProgression | None] | None = Field(
        None, alias="airingProgression"
    )
    score_distribution: list[ScoreDistribution | None] | None = Field(
        None, alias="scoreDistribution"
    )
    status_distribution: list[StatusDistribution | None] | None = Field(
        None, alias="statusDistribution"
    )
    typename__: Literal["MediaStats"] | None = Field("MediaStats", alias="__typename")


class MediaStreamingEpisode(BaseModel):
    """
    Data and links to legal streaming episodes on external sites
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    site: String | None = Field(
        None, description="The site location of the streaming episodes"
    )
    thumbnail: String | None = Field(None, description="Url of episode image thumbnail")
    title: String | None = Field(None, description="Title of the episode")
    url: String | None = Field(None, description="The url of the episode")
    typename__: Literal["MediaStreamingEpisode"] | None = Field(
        "MediaStreamingEpisode", alias="__typename"
    )


class MediaSubmission(BaseModel):
    """
    Media submission
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    assignee: User | None = Field(
        None, description="Data Mod assigned to handle the submission"
    )
    changes: list[String | None] | None = None
    characters: list[MediaSubmissionComparison | None] | None = None
    created_at: Int | None = Field(None, alias="createdAt")
    external_links: list[MediaSubmissionComparison | None] | None = Field(
        None, alias="externalLinks"
    )
    id: Int = Field(..., description="The id of the submission")
    locked: Boolean | None = Field(None, description="Whether the submission is locked")
    media: Media | None = None
    notes: String | None = None
    relations: list[MediaEdge | None] | None = None
    source: String | None = None
    staff: list[MediaSubmissionComparison | None] | None = None
    status: SubmissionStatus | None = Field(
        None, description="Status of the submission"
    )
    studios: list[MediaSubmissionComparison | None] | None = None
    submission: Media | None = None
    submitter: User | None = Field(None, description="User submitter of the submission")
    submitter_stats: Json | None = Field(None, alias="submitterStats")
    typename__: Literal["MediaSubmission"] | None = Field(
        "MediaSubmission", alias="__typename"
    )


class MediaSubmissionComparison(BaseModel):
    """
    Media submission with comparison to current data
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    character: MediaCharacter | None = None
    external_link: MediaExternalLink | None = Field(None, alias="externalLink")
    staff: StaffEdge | None = None
    studio: StudioEdge | None = None
    submission: MediaSubmissionEdge | None = None
    typename__: Literal["MediaSubmissionComparison"] | None = Field(
        "MediaSubmissionComparison", alias="__typename"
    )


class MediaSubmissionEdge(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    character: Character | None = None
    character_name: String | None = Field(None, alias="characterName")
    character_role: CharacterRole | None = Field(None, alias="characterRole")
    character_submission: Character | None = Field(None, alias="characterSubmission")
    dub_group: String | None = Field(None, alias="dubGroup")
    external_link: MediaExternalLink | None = Field(None, alias="externalLink")
    id: Int | None = Field(None, description="The id of the direct submission")
    is_main: Boolean | None = Field(None, alias="isMain")
    media: Media | None = None
    role_notes: String | None = Field(None, alias="roleNotes")
    staff: Staff | None = None
    staff_role: String | None = Field(None, alias="staffRole")
    staff_submission: Staff | None = Field(None, alias="staffSubmission")
    studio: Studio | None = None
    voice_actor: Staff | None = Field(None, alias="voiceActor")
    voice_actor_submission: Staff | None = Field(None, alias="voiceActorSubmission")
    typename__: Literal["MediaSubmissionEdge"] | None = Field(
        "MediaSubmissionEdge", alias="__typename"
    )


class MediaTag(BaseModel):
    """
    A tag that describes a theme or element of the media
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    category: String | None = Field(
        None, description="The categories of tags this tag belongs to"
    )
    description: String | None = Field(
        None, description="A general description of the tag"
    )
    id: Int = Field(..., description="The id of the tag")
    is_adult: Boolean | None = Field(
        None, alias="isAdult", description="If the tag is only for adult 18+ media"
    )
    is_general_spoiler: Boolean | None = Field(
        None,
        alias="isGeneralSpoiler",
        description="If the tag could be a spoiler for any media",
    )
    is_media_spoiler: Boolean | None = Field(
        None,
        alias="isMediaSpoiler",
        description="If the tag is a spoiler for this media",
    )
    name: String = Field(..., description="The name of the tag")
    rank: Int | None = Field(
        None,
        description="The relevance ranking of the tag out of the 100 for this media",
    )
    user_id: Int | None = Field(
        None, alias="userId", description="The user who submitted the tag"
    )
    typename__: Literal["MediaTag"] | None = Field("MediaTag", alias="__typename")


class MediaTitle(BaseModel):
    """
    The official titles of the media in various languages
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    english: String | None = Field(None, description="The official english title")
    native: String | None = Field(
        None, description="Official title in it's native language"
    )
    romaji: String | None = Field(
        None, description="The romanization of the native language title"
    )
    user_preferred: String | None = Field(
        None,
        alias="userPreferred",
        description="The currently authenticated users preferred title language. Default romaji for non-authenticated",
    )
    typename__: Literal["MediaTitle"] | None = Field("MediaTitle", alias="__typename")


class MediaTrailer(BaseModel):
    """
    Media trailer or advertisement
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: String | None = Field(None, description="The trailer video id")
    site: String | None = Field(
        None,
        description="The site the video is hosted by (Currently either youtube or dailymotion)",
    )
    thumbnail: String | None = Field(
        None, description="The url for the thumbnail image of the video"
    )
    typename__: Literal["MediaTrailer"] | None = Field(
        "MediaTrailer", alias="__typename"
    )


class MediaTrend(BaseModel):
    """
    Daily media statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    average_score: Int | None = Field(
        None,
        alias="averageScore",
        description="A weighted average score of all the user's scores of the media",
    )
    date: Int = Field(..., description="The day the data was recorded (timestamp)")
    episode: Int | None = Field(
        None, description="The episode number of the anime released on this day"
    )
    in_progress: Int | None = Field(
        None,
        alias="inProgress",
        description="The number of users with watching/reading the media",
    )
    media: Media | None = Field(None, description="The related media")
    media_id: Int = Field(..., alias="mediaId", description="The id of the tag")
    popularity: Int | None = Field(
        None, description="The number of users with the media on their list"
    )
    releasing: Boolean = Field(
        ..., description="If the media was being released at this time"
    )
    trending: Int = Field(..., description="The amount of media activity on the day")
    typename__: Literal["MediaTrend"] | None = Field("MediaTrend", alias="__typename")


class MediaTrendConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[MediaTrendEdge | None] | None = None
    nodes: list[MediaTrend | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["MediaTrendConnection"] | None = Field(
        "MediaTrendConnection", alias="__typename"
    )


class MediaTrendEdge(BaseModel):
    """
    Media trend connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: MediaTrend | None = None
    typename__: Literal["MediaTrendEdge"] | None = Field(
        "MediaTrendEdge", alias="__typename"
    )


class MessageActivity(BaseModel):
    """
    User message activity
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time the activity was created at"
    )
    id: Int = Field(..., description="The id of the activity")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the activity",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="If the activity is locked and can receive replies",
    )
    is_private: Boolean | None = Field(
        None,
        alias="isPrivate",
        description="If the message is private and only viewable to the sender and recipients",
    )
    is_subscribed: Boolean | None = Field(
        None,
        alias="isSubscribed",
        description="If the currently authenticated user is subscribed to the activity",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the activity has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the activity"
    )
    message: String | None = Field(None, description="The message text (Markdown)")
    messenger: User | None = Field(
        None, description="The user who sent the activity message"
    )
    messenger_id: Int | None = Field(
        None, alias="messengerId", description="The user id of the activity's sender"
    )
    recipient: User | None = Field(
        None, description="The user who the activity message was sent to"
    )
    recipient_id: Int | None = Field(
        None, alias="recipientId", description="The user id of the activity's recipient"
    )
    replies: list[ActivityReply | None] | None = Field(
        None, description="The written replies to the activity"
    )
    reply_count: Int = Field(
        ..., alias="replyCount", description="The number of activity replies"
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the activity page on the AniList website",
    )
    type: ActivityType | None = Field(None, description="The type of the activity")
    typename__: Literal["MessageActivity"] | None = Field(
        "MessageActivity", alias="__typename"
    )


class ModAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    created_at: Int = Field(..., alias="createdAt")
    data: String | None = None
    id: Int = Field(..., description="The id of the action")
    mod: User | None = None
    object_id: Int | None = Field(None, alias="objectId")
    object_type: String | None = Field(None, alias="objectType")
    type: ModActionType | None = None
    user: User | None = None
    typename__: Literal["ModAction"] | None = Field("ModAction", alias="__typename")


class NotificationOption(BaseModel):
    """
    Notification option
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Boolean | None = Field(
        None, description="Whether this type of notification is enabled"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["NotificationOption"] | None = Field(
        "NotificationOption", alias="__typename"
    )


class Page(BaseModel):
    """
    Page of data
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activities: list[ActivityUnion | None] | None = None
    activity_replies: list[ActivityReply | None] | None = Field(
        None, alias="activityReplies"
    )
    airing_schedules: list[AiringSchedule | None] | None = Field(
        None, alias="airingSchedules"
    )
    characters: list[Character | None] | None = None
    followers: list[User | None] | None = None
    following: list[User | None] | None = None
    likes: list[User | None] | None = None
    media: list[Media | None] | None = None
    media_list: list[MediaList | None] | None = Field(None, alias="mediaList")
    media_trends: list[MediaTrend | None] | None = Field(None, alias="mediaTrends")
    notifications: list[NotificationUnion | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    recommendations: list[Recommendation | None] | None = None
    reviews: list[Review | None] | None = None
    staff: list[Staff | None] | None = None
    studios: list[Studio | None] | None = None
    thread_comments: list[ThreadComment | None] | None = Field(
        None, alias="threadComments"
    )
    threads: list[Thread | None] | None = None
    users: list[User | None] | None = None
    typename__: Literal["Page"] | None = Field("Page", alias="__typename")


class PageInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    current_page: Int | None = Field(
        None, alias="currentPage", description="The current page"
    )
    has_next_page: Boolean | None = Field(
        None, alias="hasNextPage", description="If there is another page"
    )
    last_page: Int | None = Field(None, alias="lastPage", description="The last page")
    per_page: Int | None = Field(
        None, alias="perPage", description="The count on a page"
    )
    total: Int | None = Field(
        None,
        description="The total number of items. Note: This value is not guaranteed to be accurate, do not rely on this for logic",
    )
    typename__: Literal["PageInfo"] | None = Field("PageInfo", alias="__typename")


class ParsedMarkdown(BaseModel):
    """
    Provides the parsed markdown as html
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    html: String | None = Field(None, description="The parsed markdown as html")
    typename__: Literal["ParsedMarkdown"] | None = Field(
        "ParsedMarkdown", alias="__typename"
    )


class Recommendation(BaseModel):
    """
    Media recommendation
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int = Field(..., description="The id of the recommendation")
    media: Media | None = Field(
        None, description="The media the recommendation is from"
    )
    media_recommendation: Media | None = Field(
        None, alias="mediaRecommendation", description="The recommended media"
    )
    rating: Int | None = Field(None, description="Users rating of the recommendation")
    user: User | None = Field(
        None, description="The user that first created the recommendation"
    )
    user_rating: RecommendationRating | None = Field(
        None,
        alias="userRating",
        description="The rating of the recommendation by currently authenticated user",
    )
    typename__: Literal["Recommendation"] | None = Field(
        "Recommendation", alias="__typename"
    )


class RecommendationConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[RecommendationEdge | None] | None = None
    nodes: list[Recommendation | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["RecommendationConnection"] | None = Field(
        "RecommendationConnection", alias="__typename"
    )


class RecommendationEdge(BaseModel):
    """
    Recommendation connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: Recommendation | None = None
    typename__: Literal["RecommendationEdge"] | None = Field(
        "RecommendationEdge", alias="__typename"
    )


class RelatedMediaAdditionNotification(BaseModel):
    """
    Notification for when new media is added to the site
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    media: Media | None = Field(
        None, description="The associated media of the airing schedule"
    )
    media_id: Int = Field(..., alias="mediaId", description="The id of the new media")
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["RelatedMediaAdditionNotification"] | None = Field(
        "RelatedMediaAdditionNotification", alias="__typename"
    )


class Report(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cleared: Boolean | None = None
    created_at: Int | None = Field(
        None, alias="createdAt", description="When the entry data was created"
    )
    id: Int
    reason: String | None = None
    reported: User | None = None
    reporter: User | None = None
    typename__: Literal["Report"] | None = Field("Report", alias="__typename")


class Review(BaseModel):
    """
    A Review that features in an anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    body: String | None = Field(None, description="The main review body text")
    created_at: Int = Field(
        ..., alias="createdAt", description="The time of the thread creation"
    )
    id: Int = Field(..., description="The id of the review")
    media: Media | None = Field(None, description="The media the review is of")
    media_id: Int = Field(
        ..., alias="mediaId", description="The id of the review's media"
    )
    media_type: MediaType | None = Field(
        None, alias="mediaType", description="For which type of media the review is for"
    )
    private: Boolean | None = Field(
        None,
        description="If the review is not yet publicly published and is only viewable by creator",
    )
    rating: Int | None = Field(None, description="The total user rating of the review")
    rating_amount: Int | None = Field(
        None,
        alias="ratingAmount",
        description="The amount of user ratings of the review",
    )
    score: Int | None = Field(None, description="The review score of the media")
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the review page on the AniList website",
    )
    summary: String | None = Field(None, description="A short summary of the review")
    updated_at: Int = Field(
        ..., alias="updatedAt", description="The time of the thread last update"
    )
    user: User | None = Field(None, description="The creator of the review")
    user_id: Int = Field(
        ..., alias="userId", description="The id of the review's creator"
    )
    user_rating: ReviewRating | None = Field(
        None,
        alias="userRating",
        description="The rating of the review by currently authenticated user",
    )
    typename__: Literal["Review"] | None = Field("Review", alias="__typename")


class ReviewConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[ReviewEdge | None] | None = None
    nodes: list[Review | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["ReviewConnection"] | None = Field(
        "ReviewConnection", alias="__typename"
    )


class ReviewEdge(BaseModel):
    """
    Review connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: Review | None = None
    typename__: Literal["ReviewEdge"] | None = Field("ReviewEdge", alias="__typename")


class RevisionHistory(BaseModel):
    """
    Feed of mod edit activity
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    action: RevisionHistoryAction | None = Field(
        None, description="The action taken on the objects"
    )
    changes: Json | None = Field(
        None, description="A JSON object of the fields that changed"
    )
    character: Character | None = Field(
        None, description="The character the mod feed entry references"
    )
    created_at: Int | None = Field(
        None, alias="createdAt", description="When the mod feed entry was created"
    )
    external_link: MediaExternalLink | None = Field(
        None,
        alias="externalLink",
        description="The external link source the mod feed entry references",
    )
    id: Int = Field(..., description="The id of the media")
    media: Media | None = Field(
        None, description="The media the mod feed entry references"
    )
    staff: Staff | None = Field(
        None, description="The staff member the mod feed entry references"
    )
    studio: Studio | None = Field(
        None, description="The studio the mod feed entry references"
    )
    user: User | None = Field(
        None, description="The user who made the edit to the object"
    )
    typename__: Literal["RevisionHistory"] | None = Field(
        "RevisionHistory", alias="__typename"
    )


class ScoreDistribution(BaseModel):
    """
    A user's list score distribution.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = Field(
        None, description="The amount of list entries with this score"
    )
    score: Int | None = None
    typename__: Literal["ScoreDistribution"] | None = Field(
        "ScoreDistribution", alias="__typename"
    )


class SiteStatistics(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    anime: SiteTrendConnection | None = None
    characters: SiteTrendConnection | None = None
    manga: SiteTrendConnection | None = None
    reviews: SiteTrendConnection | None = None
    staff: SiteTrendConnection | None = None
    studios: SiteTrendConnection | None = None
    users: SiteTrendConnection | None = None
    typename__: Literal["SiteStatistics"] | None = Field(
        "SiteStatistics", alias="__typename"
    )


class SiteTrend(BaseModel):
    """
    Daily site statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    change: Int = Field(..., description="The change from yesterday")
    count: Int
    date: Int = Field(..., description="The day the data was recorded (timestamp)")
    typename__: Literal["SiteTrend"] | None = Field("SiteTrend", alias="__typename")


class SiteTrendConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[SiteTrendEdge | None] | None = None
    nodes: list[SiteTrend | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["SiteTrendConnection"] | None = Field(
        "SiteTrendConnection", alias="__typename"
    )


class SiteTrendEdge(BaseModel):
    """
    Site trend connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    node: SiteTrend | None = None
    typename__: Literal["SiteTrendEdge"] | None = Field(
        "SiteTrendEdge", alias="__typename"
    )


class Staff(BaseModel):
    """
    Voice actors or production staff
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    age: Int | None = Field(None, description="The person's age in years")
    blood_type: String | None = Field(
        None, alias="bloodType", description="The persons blood type"
    )
    character_media: MediaConnection | None = Field(
        None,
        alias="characterMedia",
        description="Media the actor voiced characters in. (Same data as characters with media as node instead of characters)",
    )
    characters: CharacterConnection | None = Field(
        None, description="Characters voiced by the actor"
    )
    date_of_birth: FuzzyDate | None = Field(None, alias="dateOfBirth")
    date_of_death: FuzzyDate | None = Field(None, alias="dateOfDeath")
    description: String | None = Field(
        None, description="A general description of the staff member"
    )
    favourites: Int | None = Field(
        None, description="The amount of user's who have favourited the staff member"
    )
    gender: String | None = Field(
        None,
        description="The staff's gender. Usually Male, Female, or Non-binary but can be any string.",
    )
    home_town: String | None = Field(
        None, alias="homeTown", description="The persons birthplace or hometown"
    )
    id: Int = Field(..., description="The id of the staff member")
    image: StaffImage | None = Field(None, description="The staff images")
    is_favourite: Boolean = Field(
        ...,
        alias="isFavourite",
        description="If the staff member is marked as favourite by the currently authenticated user",
    )
    is_favourite_blocked: Boolean = Field(
        ...,
        alias="isFavouriteBlocked",
        description="If the staff member is blocked from being added to favourites",
    )
    language: StaffLanguage | None = Field(
        None, description="The primary language the staff member dub's in"
    )
    language_v2: String | None = Field(
        None,
        alias="languageV2",
        description="The primary language of the staff member. Current values: Japanese, English, Korean, Italian, Spanish, Portuguese, French, German, Hebrew, Hungarian, Chinese, Arabic, Filipino, Catalan, Finnish, Turkish, Dutch, Swedish, Thai, Tagalog, Malaysian, Indonesian, Vietnamese, Nepali, Hindi, Urdu",
    )
    mod_notes: String | None = Field(
        None, alias="modNotes", description="Notes for site moderators"
    )
    name: StaffName | None = Field(None, description="The names of the staff member")
    primary_occupations: list[String | None] | None = Field(
        None, alias="primaryOccupations", description="The person's primary occupations"
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the staff page on the AniList website",
    )
    staff: Staff | None = Field(
        None, description="Staff member that the submission is referencing"
    )
    staff_media: MediaConnection | None = Field(
        None,
        alias="staffMedia",
        description="Media where the staff member has a production role",
    )
    submission_notes: String | None = Field(
        None, alias="submissionNotes", description="Inner details of submission status"
    )
    submission_status: Int | None = Field(
        None, alias="submissionStatus", description="Status of the submission"
    )
    submitter: User | None = Field(None, description="Submitter for the submission")
    updated_at: Int | None = Field(None, alias="updatedAt")
    years_active: list[Int | None] | None = Field(
        None,
        alias="yearsActive",
        description="[startYear, endYear] (If the 2nd value is not present staff is still active)",
    )
    typename__: Literal["Staff"] | None = Field("Staff", alias="__typename")


class StaffConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[StaffEdge | None] | None = None
    nodes: list[Staff | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["StaffConnection"] | None = Field(
        "StaffConnection", alias="__typename"
    )


class StaffEdge(BaseModel):
    """
    Staff connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    favourite_order: Int | None = Field(
        None,
        alias="favouriteOrder",
        description="The order the staff should be displayed from the users favourites",
    )
    id: Int | None = Field(None, description="The id of the connection")
    node: Staff | None = None
    role: String | None = Field(
        None, description="The role of the staff member in the production of the media"
    )
    typename__: Literal["StaffEdge"] | None = Field("StaffEdge", alias="__typename")


class StaffImage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    large: String | None = Field(
        None, description="The person's image of media at its largest size"
    )
    medium: String | None = Field(
        None, description="The person's image of media at medium size"
    )
    typename__: Literal["StaffImage"] | None = Field("StaffImage", alias="__typename")


class StaffName(BaseModel):
    """
    The names of the staff member
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alternative: list[String | None] | None = Field(
        None,
        description="Other names the staff member might be referred to as (pen names)",
    )
    first: String | None = Field(None, description="The person's given name")
    full: String | None = Field(None, description="The person's first and last name")
    last: String | None = Field(None, description="The person's surname")
    middle: String | None = Field(None, description="The person's middle name")
    native: String | None = Field(
        None, description="The person's full name in their native language"
    )
    user_preferred: String | None = Field(
        None,
        alias="userPreferred",
        description="The currently authenticated users preferred name language. Default romaji for non-authenticated",
    )
    typename__: Literal["StaffName"] | None = Field("StaffName", alias="__typename")


class StaffRoleType(BaseModel):
    """
    Voice actor role for a character
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    dub_group: String | None = Field(
        None,
        alias="dubGroup",
        description="Used for grouping roles where multiple dubs exist for the same language. Either dubbing company name or language variant.",
    )
    role_notes: String | None = Field(
        None,
        alias="roleNotes",
        description="Notes regarding the VA's role for the character",
    )
    voice_actor: Staff | None = Field(
        None, alias="voiceActor", description="The voice actors of the character"
    )
    typename__: Literal["StaffRoleType"] | None = Field(
        "StaffRoleType", alias="__typename"
    )


class StaffStats(BaseModel):
    """
    User's staff statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    mean_score: Int | None = Field(None, alias="meanScore")
    staff: Staff | None = None
    time_watched: Int | None = Field(
        None,
        alias="timeWatched",
        description="The amount of time in minutes the staff member has been watched by the user",
    )
    typename__: Literal["StaffStats"] | None = Field("StaffStats", alias="__typename")


class StaffSubmission(BaseModel):
    """
    A submission for a staff that features in an anime or manga
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    assignee: User | None = Field(
        None, description="Data Mod assigned to handle the submission"
    )
    created_at: Int | None = Field(None, alias="createdAt")
    id: Int = Field(..., description="The id of the submission")
    locked: Boolean | None = Field(None, description="Whether the submission is locked")
    notes: String | None = Field(None, description="Inner details of submission status")
    source: String | None = None
    staff: Staff | None = Field(
        None, description="Staff that the submission is referencing"
    )
    status: SubmissionStatus | None = Field(
        None, description="Status of the submission"
    )
    submission: Staff | None = Field(None, description="The staff submission changes")
    submitter: User | None = Field(None, description="Submitter for the submission")
    typename__: Literal["StaffSubmission"] | None = Field(
        "StaffSubmission", alias="__typename"
    )


class StatusDistribution(BaseModel):
    """
    The distribution of the watching/reading status of media or a user's list
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = Field(
        None, description="The amount of entries with this status"
    )
    status: MediaListStatus | None = Field(
        None, description="The day the activity took place (Unix timestamp)"
    )
    typename__: Literal["StatusDistribution"] | None = Field(
        "StatusDistribution", alias="__typename"
    )


class Studio(BaseModel):
    """
    Animation or production company
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    favourites: Int | None = Field(
        None, description="The amount of user's who have favourited the studio"
    )
    id: Int = Field(..., description="The id of the studio")
    is_animation_studio: Boolean = Field(
        ...,
        alias="isAnimationStudio",
        description="If the studio is an animation studio or a different kind of company",
    )
    is_favourite: Boolean = Field(
        ...,
        alias="isFavourite",
        description="If the studio is marked as favourite by the currently authenticated user",
    )
    media: MediaConnection | None = Field(
        None, description="The media the studio has worked on"
    )
    name: String = Field(..., description="The name of the studio")
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the studio page on the AniList website",
    )
    typename__: Literal["Studio"] | None = Field("Studio", alias="__typename")


class StudioConnection(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    edges: list[StudioEdge | None] | None = None
    nodes: list[Studio | None] | None = None
    page_info: PageInfo | None = Field(
        None, alias="pageInfo", description="The pagination information"
    )
    typename__: Literal["StudioConnection"] | None = Field(
        "StudioConnection", alias="__typename"
    )


class StudioEdge(BaseModel):
    """
    Studio connection edge
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    favourite_order: Int | None = Field(
        None,
        alias="favouriteOrder",
        description="The order the character should be displayed from the users favourites",
    )
    id: Int | None = Field(None, description="The id of the connection")
    is_main: Boolean = Field(
        ...,
        alias="isMain",
        description="If the studio is the main animation studio of the anime",
    )
    node: Studio | None = None
    typename__: Literal["StudioEdge"] | None = Field("StudioEdge", alias="__typename")


class StudioStats(BaseModel):
    """
    User's studio statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    mean_score: Int | None = Field(None, alias="meanScore")
    studio: Studio | None = None
    time_watched: Int | None = Field(
        None,
        alias="timeWatched",
        description="The amount of time in minutes the studio's works have been watched by the user",
    )
    typename__: Literal["StudioStats"] | None = Field("StudioStats", alias="__typename")


class TagStats(BaseModel):
    """
    User's tag statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    mean_score: Int | None = Field(None, alias="meanScore")
    tag: MediaTag | None = None
    time_watched: Int | None = Field(
        None,
        alias="timeWatched",
        description="The amount of time in minutes the tag has been watched by the user",
    )
    typename__: Literal["TagStats"] | None = Field("TagStats", alias="__typename")


class TextActivity(BaseModel):
    """
    User text activity
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time the activity was created at"
    )
    id: Int = Field(..., description="The id of the activity")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the activity",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="If the activity is locked and can receive replies",
    )
    is_pinned: Boolean | None = Field(
        None,
        alias="isPinned",
        description="If the activity is pinned to the top of the users activity feed",
    )
    is_subscribed: Boolean | None = Field(
        None,
        alias="isSubscribed",
        description="If the currently authenticated user is subscribed to the activity",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the activity has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the activity"
    )
    replies: list[ActivityReply | None] | None = Field(
        None, description="The written replies to the activity"
    )
    reply_count: Int = Field(
        ..., alias="replyCount", description="The number of activity replies"
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the activity page on the AniList website",
    )
    text: String | None = Field(None, description="The status text (Markdown)")
    type: ActivityType | None = Field(None, description="The type of activity")
    user: User | None = Field(None, description="The user who created the activity")
    user_id: Int | None = Field(
        None, alias="userId", description="The user id of the activity's creator"
    )
    typename__: Literal["TextActivity"] | None = Field(
        "TextActivity", alias="__typename"
    )


class Thread(BaseModel):
    """
    Forum Thread
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    body: String | None = Field(
        None, description="The text body of the thread (Markdown)"
    )
    categories: list[ThreadCategory | None] | None = Field(
        None, description="The categories of the thread"
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time of the thread creation"
    )
    id: Int = Field(..., description="The id of the thread")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the thread",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="If the thread is locked and can receive comments",
    )
    is_sticky: Boolean | None = Field(
        None,
        alias="isSticky",
        description="If the thread is stickied and should be displayed at the top of the page",
    )
    is_subscribed: Boolean | None = Field(
        None,
        alias="isSubscribed",
        description="If the currently authenticated user is subscribed to the thread",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the thread has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the thread"
    )
    media_categories: list[Media | None] | None = Field(
        None, alias="mediaCategories", description="The media categories of the thread"
    )
    replied_at: Int | None = Field(
        None, alias="repliedAt", description="The time of the last reply"
    )
    reply_comment_id: Int | None = Field(
        None,
        alias="replyCommentId",
        description="The id of the most recent comment on the thread",
    )
    reply_count: Int | None = Field(
        None, alias="replyCount", description="The number of comments on the thread"
    )
    reply_user: User | None = Field(
        None, alias="replyUser", description="The user to last reply to the thread"
    )
    reply_user_id: Int | None = Field(
        None,
        alias="replyUserId",
        description="The id of the user who most recently commented on the thread",
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the thread page on the AniList website",
    )
    title: String | None = Field(None, description="The title of the thread")
    updated_at: Int = Field(
        ..., alias="updatedAt", description="The time of the thread last update"
    )
    user: User | None = Field(None, description="The owner of the thread")
    user_id: Int = Field(
        ..., alias="userId", description="The id of the thread owner user"
    )
    view_count: Int | None = Field(
        None,
        alias="viewCount",
        description="The number of times users have viewed the thread",
    )
    typename__: Literal["Thread"] | None = Field("Thread", alias="__typename")


class ThreadCategory(BaseModel):
    """
    A forum thread category
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int = Field(..., description="The id of the category")
    name: String = Field(..., description="The name of the category")
    typename__: Literal["ThreadCategory"] | None = Field(
        "ThreadCategory", alias="__typename"
    )


class ThreadComment(BaseModel):
    """
    Forum Thread Comment
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    child_comments: Json | None = Field(
        None, alias="childComments", description="The comment's child reply comments"
    )
    comment: String | None = Field(
        None, description="The text content of the comment (Markdown)"
    )
    created_at: Int = Field(
        ..., alias="createdAt", description="The time of the comments creation"
    )
    id: Int = Field(..., description="The id of the comment")
    is_liked: Boolean | None = Field(
        None,
        alias="isLiked",
        description="If the currently authenticated user liked the comment",
    )
    is_locked: Boolean | None = Field(
        None,
        alias="isLocked",
        description="If the comment tree is locked and may not receive replies or edits",
    )
    like_count: Int = Field(
        ..., alias="likeCount", description="The amount of likes the comment has"
    )
    likes: list[User | None] | None = Field(
        None, description="The users who liked the comment"
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the comment page on the AniList website",
    )
    thread: Thread | None = Field(None, description="The thread the comment belongs to")
    thread_id: Int | None = Field(
        None, alias="threadId", description="The id of thread the comment belongs to"
    )
    updated_at: Int = Field(
        ..., alias="updatedAt", description="The time of the comments last update"
    )
    user: User | None = Field(None, description="The user who created the comment")
    user_id: Int | None = Field(
        None, alias="userId", description="The user id of the comment's owner"
    )
    typename__: Literal["ThreadComment"] | None = Field(
        "ThreadComment", alias="__typename"
    )


class ThreadCommentLikeNotification(BaseModel):
    """
    Notification for when a thread comment is liked
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    comment: ThreadComment | None = Field(
        None, description="The thread comment that was liked"
    )
    comment_id: Int = Field(
        ..., alias="commentId", description="The id of the activity which was liked"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    thread: Thread | None = Field(
        None, description="The thread that the relevant comment belongs to"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who liked the activity")
    user_id: Int = Field(
        ..., alias="userId", description="The id of the user who liked to the activity"
    )
    typename__: Literal["ThreadCommentLikeNotification"] | None = Field(
        "ThreadCommentLikeNotification", alias="__typename"
    )


class ThreadCommentMentionNotification(BaseModel):
    """
    Notification for when authenticated user is @ mentioned in a forum thread comment
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    comment: ThreadComment | None = Field(
        None, description="The thread comment that included the @ mention"
    )
    comment_id: Int = Field(
        ..., alias="commentId", description="The id of the comment where mentioned"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    thread: Thread | None = Field(
        None, description="The thread that the relevant comment belongs to"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(
        None, description="The user who mentioned the authenticated user"
    )
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who mentioned the authenticated user",
    )
    typename__: Literal["ThreadCommentMentionNotification"] | None = Field(
        "ThreadCommentMentionNotification", alias="__typename"
    )


class ThreadCommentReplyNotification(BaseModel):
    """
    Notification for when a user replies to your forum thread comment
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    comment: ThreadComment | None = Field(None, description="The reply thread comment")
    comment_id: Int = Field(
        ..., alias="commentId", description="The id of the reply comment"
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    thread: Thread | None = Field(
        None, description="The thread that the relevant comment belongs to"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who replied to the activity")
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who create the comment reply",
    )
    typename__: Literal["ThreadCommentReplyNotification"] | None = Field(
        "ThreadCommentReplyNotification", alias="__typename"
    )


class ThreadCommentSubscribedNotification(BaseModel):
    """
    Notification for when a user replies to a subscribed forum thread
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    comment: ThreadComment | None = Field(None, description="The reply thread comment")
    comment_id: Int = Field(
        ...,
        alias="commentId",
        description="The id of the new comment in the subscribed thread",
    )
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    thread: Thread | None = Field(
        None, description="The thread that the relevant comment belongs to"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(
        None, description="The user who replied to the subscribed thread"
    )
    user_id: Int = Field(
        ...,
        alias="userId",
        description="The id of the user who commented on the thread",
    )
    typename__: Literal["ThreadCommentSubscribedNotification"] | None = Field(
        "ThreadCommentSubscribedNotification", alias="__typename"
    )


class ThreadLikeNotification(BaseModel):
    """
    Notification for when a thread is liked
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    comment: ThreadComment | None = Field(None, description="The liked thread comment")
    context: String | None = Field(None, description="The notification context text")
    created_at: Int | None = Field(
        None, alias="createdAt", description="The time the notification was created at"
    )
    id: Int = Field(..., description="The id of the Notification")
    thread: Thread | None = Field(
        None, description="The thread that the relevant comment belongs to"
    )
    thread_id: Int = Field(
        ..., alias="threadId", description="The id of the thread which was liked"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    user: User | None = Field(None, description="The user who liked the activity")
    user_id: Int = Field(
        ..., alias="userId", description="The id of the user who liked to the activity"
    )
    typename__: Literal["ThreadLikeNotification"] | None = Field(
        "ThreadLikeNotification", alias="__typename"
    )


class User(BaseModel):
    """
    A user
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    about: String | None = Field(None, description="The bio written by user (Markdown)")
    avatar: UserAvatar | None = Field(None, description="The user's avatar images")
    banner_image: String | None = Field(
        None, alias="bannerImage", description="The user's banner images"
    )
    bans: Json | None = None
    created_at: Int | None = Field(
        None,
        alias="createdAt",
        description="When the user's account was created. (Does not exist for accounts created before 2020)",
    )
    donator_badge: String | None = Field(
        None, alias="donatorBadge", description="Custom donation badge text"
    )
    donator_tier: Int | None = Field(
        None, alias="donatorTier", description="The donation tier of the user"
    )
    favourites: Favourites | None = Field(None, description="The users favourites")
    id: Int = Field(..., description="The id of the user")
    is_blocked: Boolean | None = Field(
        None,
        alias="isBlocked",
        description="If the user is blocked by the authenticated user",
    )
    is_follower: Boolean | None = Field(
        None,
        alias="isFollower",
        description="If this user if following the authenticated user",
    )
    is_following: Boolean | None = Field(
        None,
        alias="isFollowing",
        description="If the authenticated user if following this user",
    )
    media_list_options: MediaListOptions | None = Field(
        None, alias="mediaListOptions", description="The user's media list options"
    )
    moderator_roles: list[ModRole | None] | None = Field(
        None,
        alias="moderatorRoles",
        description="The user's moderator roles if they are a site moderator",
    )
    moderator_status: String | None = Field(
        None,
        alias="moderatorStatus",
        description="If the user is a moderator or data moderator",
    )
    name: String = Field(..., description="The name of the user")
    options: UserOptions | None = Field(None, description="The user's general options")
    previous_names: list[UserPreviousName | None] | None = Field(
        None, alias="previousNames", description="The user's previously used names."
    )
    site_url: String | None = Field(
        None,
        alias="siteUrl",
        description="The url for the user page on the AniList website",
    )
    statistics: UserStatisticTypes | None = Field(
        None, description="The users anime & manga list statistics"
    )
    stats: UserStats | None = Field(None, description="The user's statistics")
    unread_notification_count: Int | None = Field(
        None,
        alias="unreadNotificationCount",
        description="The number of unread notifications the user has",
    )
    updated_at: Int | None = Field(
        None, alias="updatedAt", description="When the user's data was last updated"
    )
    typename__: Literal["User"] | None = Field("User", alias="__typename")


class UserActivityHistory(BaseModel):
    """
    A user's activity history stats.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = Field(None, description="The amount of activity on the day")
    date: Int | None = Field(
        None, description="The day the activity took place (Unix timestamp)"
    )
    level: Int | None = Field(
        None, description="The level of activity represented on a 1-10 scale"
    )
    typename__: Literal["UserActivityHistory"] | None = Field(
        "UserActivityHistory", alias="__typename"
    )


class UserAvatar(BaseModel):
    """
    A user's avatars
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    large: String | None = Field(
        None, description="The avatar of user at its largest size"
    )
    medium: String | None = Field(None, description="The avatar of user at medium size")
    typename__: Literal["UserAvatar"] | None = Field("UserAvatar", alias="__typename")


class UserCountryStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    country: CountryCode | None = None
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    typename__: Literal["UserCountryStatistic"] | None = Field(
        "UserCountryStatistic", alias="__typename"
    )


class UserFormatStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    format: MediaFormat | None = None
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    typename__: Literal["UserFormatStatistic"] | None = Field(
        "UserFormatStatistic", alias="__typename"
    )


class UserGenreStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    genre: String | None = None
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    typename__: Literal["UserGenreStatistic"] | None = Field(
        "UserGenreStatistic", alias="__typename"
    )


class UserLengthStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    length: String | None = None
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    typename__: Literal["UserLengthStatistic"] | None = Field(
        "UserLengthStatistic", alias="__typename"
    )


class UserModData(BaseModel):
    """
    User data for moderators
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alts: list[User | None] | None = None
    bans: Json | None = None
    counts: Json | None = None
    email: String | None = None
    ip: Json | None = None
    privacy: Int | None = None
    typename__: Literal["UserModData"] | None = Field("UserModData", alias="__typename")


class UserOptions(BaseModel):
    """
    A user's general options
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity_merge_time: Int | None = Field(
        None,
        alias="activityMergeTime",
        description="Minutes between activity for them to be merged together. 0 is Never, Above 2 weeks (20160 mins) is Always.",
    )
    airing_notifications: Boolean | None = Field(
        None,
        alias="airingNotifications",
        description="Whether the user receives notifications when a show they are watching aires",
    )
    disabled_list_activity: list[ListActivityOption | None] | None = Field(
        None,
        alias="disabledListActivity",
        description="The list activity types the user has disabled from being created from list updates",
    )
    display_adult_content: Boolean | None = Field(
        None,
        alias="displayAdultContent",
        description="Whether the user has enabled viewing of 18+ content",
    )
    notification_options: list[NotificationOption | None] | None = Field(
        None, alias="notificationOptions", description="Notification options"
    )
    profile_color: String | None = Field(
        None,
        alias="profileColor",
        description="Profile highlight color (blue, purple, pink, orange, red, green, gray)",
    )
    restrict_messages_to_following: Boolean | None = Field(
        None,
        alias="restrictMessagesToFollowing",
        description="Whether the user only allow messages from users they follow",
    )
    staff_name_language: UserStaffNameLanguage | None = Field(
        None,
        alias="staffNameLanguage",
        description="The language the user wants to see staff and character names in",
    )
    timezone: String | None = Field(
        None, description="The user's timezone offset (Auth user only)"
    )
    title_language: UserTitleLanguage | None = Field(
        None,
        alias="titleLanguage",
        description="The language the user wants to see media titles in",
    )
    typename__: Literal["UserOptions"] | None = Field("UserOptions", alias="__typename")


class UserPreviousName(BaseModel):
    """
    A user's previous name
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    created_at: Int | None = Field(
        None,
        alias="createdAt",
        description="When the user first changed from this name.",
    )
    name: String | None = Field(None, description="A previous name of the user.")
    updated_at: Int | None = Field(
        None,
        alias="updatedAt",
        description="When the user most recently changed from this name.",
    )
    typename__: Literal["UserPreviousName"] | None = Field(
        "UserPreviousName", alias="__typename"
    )


class UserReleaseYearStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    release_year: Int | None = Field(None, alias="releaseYear")
    typename__: Literal["UserReleaseYearStatistic"] | None = Field(
        "UserReleaseYearStatistic", alias="__typename"
    )


class UserScoreStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    score: Int | None = None
    typename__: Literal["UserScoreStatistic"] | None = Field(
        "UserScoreStatistic", alias="__typename"
    )


class UserStaffStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    staff: Staff | None = None
    typename__: Literal["UserStaffStatistic"] | None = Field(
        "UserStaffStatistic", alias="__typename"
    )


class UserStartYearStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    start_year: Int | None = Field(None, alias="startYear")
    typename__: Literal["UserStartYearStatistic"] | None = Field(
        "UserStartYearStatistic", alias="__typename"
    )


class UserStatisticTypes(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    anime: UserStatistics | None = None
    manga: UserStatistics | None = None
    typename__: Literal["UserStatisticTypes"] | None = Field(
        "UserStatisticTypes", alias="__typename"
    )


class UserStatistics(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    countries: list[UserCountryStatistic | None] | None = None
    episodes_watched: Int = Field(..., alias="episodesWatched")
    formats: list[UserFormatStatistic | None] | None = None
    genres: list[UserGenreStatistic | None] | None = None
    lengths: list[UserLengthStatistic | None] | None = None
    mean_score: Float = Field(..., alias="meanScore")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    release_years: list[UserReleaseYearStatistic | None] | None = Field(
        None, alias="releaseYears"
    )
    scores: list[UserScoreStatistic | None] | None = None
    staff: list[UserStaffStatistic | None] | None = None
    standard_deviation: Float = Field(..., alias="standardDeviation")
    start_years: list[UserStartYearStatistic | None] | None = Field(
        None, alias="startYears"
    )
    statuses: list[UserStatusStatistic | None] | None = None
    studios: list[UserStudioStatistic | None] | None = None
    tags: list[UserTagStatistic | None] | None = None
    voice_actors: list[UserVoiceActorStatistic | None] | None = Field(
        None, alias="voiceActors"
    )
    volumes_read: Int = Field(..., alias="volumesRead")
    typename__: Literal["UserStatistics"] | None = Field(
        "UserStatistics", alias="__typename"
    )


class UserStats(BaseModel):
    """
    A user's statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    activity_history: list[UserActivityHistory | None] | None = Field(
        None, alias="activityHistory"
    )
    anime_list_scores: ListScoreStats | None = Field(None, alias="animeListScores")
    anime_score_distribution: list[ScoreDistribution | None] | None = Field(
        None, alias="animeScoreDistribution"
    )
    anime_status_distribution: list[StatusDistribution | None] | None = Field(
        None, alias="animeStatusDistribution"
    )
    chapters_read: Int | None = Field(
        None,
        alias="chaptersRead",
        description="The amount of manga chapters the user has read",
    )
    favoured_actors: list[StaffStats | None] | None = Field(
        None, alias="favouredActors"
    )
    favoured_formats: list[FormatStats | None] | None = Field(
        None, alias="favouredFormats"
    )
    favoured_genres: list[GenreStats | None] | None = Field(
        None, alias="favouredGenres"
    )
    favoured_genres_overview: list[GenreStats | None] | None = Field(
        None, alias="favouredGenresOverview"
    )
    favoured_staff: list[StaffStats | None] | None = Field(None, alias="favouredStaff")
    favoured_studios: list[StudioStats | None] | None = Field(
        None, alias="favouredStudios"
    )
    favoured_tags: list[TagStats | None] | None = Field(None, alias="favouredTags")
    favoured_years: list[YearStats | None] | None = Field(None, alias="favouredYears")
    manga_list_scores: ListScoreStats | None = Field(None, alias="mangaListScores")
    manga_score_distribution: list[ScoreDistribution | None] | None = Field(
        None, alias="mangaScoreDistribution"
    )
    manga_status_distribution: list[StatusDistribution | None] | None = Field(
        None, alias="mangaStatusDistribution"
    )
    watched_time: Int | None = Field(
        None,
        alias="watchedTime",
        description="The amount of anime the user has watched in minutes",
    )
    typename__: Literal["UserStats"] | None = Field("UserStats", alias="__typename")


class UserStatusStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    status: MediaListStatus | None = None
    typename__: Literal["UserStatusStatistic"] | None = Field(
        "UserStatusStatistic", alias="__typename"
    )


class UserStudioStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    studio: Studio | None = None
    typename__: Literal["UserStudioStatistic"] | None = Field(
        "UserStudioStatistic", alias="__typename"
    )


class UserTagStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    tag: MediaTag | None = None
    typename__: Literal["UserTagStatistic"] | None = Field(
        "UserTagStatistic", alias="__typename"
    )


class UserVoiceActorStatistic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    chapters_read: Int = Field(..., alias="chaptersRead")
    character_ids: list[Int | None] = Field(..., alias="characterIds")
    count: Int
    mean_score: Float = Field(..., alias="meanScore")
    media_ids: list[Int | None] = Field(..., alias="mediaIds")
    minutes_watched: Int = Field(..., alias="minutesWatched")
    voice_actor: Staff | None = Field(None, alias="voiceActor")
    typename__: Literal["UserVoiceActorStatistic"] | None = Field(
        "UserVoiceActorStatistic", alias="__typename"
    )


class YearStats(BaseModel):
    """
    User's year statistics
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    amount: Int | None = None
    mean_score: Int | None = Field(None, alias="meanScore")
    year: Int | None = None
    typename__: Literal["YearStats"] | None = Field("YearStats", alias="__typename")


class AiringScheduleInput(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    airing_at: Int | None = Field(None, alias="airingAt")
    episode: Int | None = None
    time_until_airing: Int | None = Field(None, alias="timeUntilAiring")
    typename__: Literal["AiringScheduleInput"] | None = Field(
        "AiringScheduleInput", alias="__typename"
    )


class AniChartHighlightInput(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    highlight: String | None = None
    media_id: Int | None = Field(None, alias="mediaId")
    typename__: Literal["AniChartHighlightInput"] | None = Field(
        "AniChartHighlightInput", alias="__typename"
    )


class CharacterNameInput(BaseModel):
    """
    The names of the character
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alternative: list[String | None] | None = Field(
        None, description="Other names the character might be referred by"
    )
    alternative_spoiler: list[String | None] | None = Field(
        None,
        alias="alternativeSpoiler",
        description="Other names the character might be referred to as but are spoilers",
    )
    first: String | None = Field(None, description="The character's given name")
    last: String | None = Field(None, description="The character's surname")
    middle: String | None = Field(None, description="The character's middle name")
    native: String | None = Field(
        None, description="The character's full name in their native language"
    )
    typename__: Literal["CharacterNameInput"] | None = Field(
        "CharacterNameInput", alias="__typename"
    )


class FuzzyDateInput(BaseModel):
    """
    Date object that allows for incomplete date values (fuzzy)
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    day: Int | None = Field(None, description="Numeric Day (24)")
    month: Int | None = Field(None, description="Numeric Month (3)")
    year: Int | None = Field(None, description="Numeric Year (2017)")
    typename__: Literal["FuzzyDateInput"] | None = Field(
        "FuzzyDateInput", alias="__typename"
    )


class ListActivityOptionInput(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    disabled: Boolean | None = None
    type: MediaListStatus | None = None
    typename__: Literal["ListActivityOptionInput"] | None = Field(
        "ListActivityOptionInput", alias="__typename"
    )


class MediaExternalLinkInput(BaseModel):
    """
    An external link to another site related to the media
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: Int = Field(..., description="The id of the external link")
    site: String = Field(..., description="The site location of the external link")
    url: String = Field(..., description="The url of the external link")
    typename__: Literal["MediaExternalLinkInput"] | None = Field(
        "MediaExternalLinkInput", alias="__typename"
    )


class MediaListOptionsInput(BaseModel):
    """
    A user's list options for anime or manga lists
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    advanced_scoring: list[String | None] | None = Field(
        None,
        alias="advancedScoring",
        description="The names of the user's advanced scoring sections",
    )
    advanced_scoring_enabled: Boolean | None = Field(
        None,
        alias="advancedScoringEnabled",
        description="If advanced scoring is enabled",
    )
    custom_lists: list[String | None] | None = Field(
        None, alias="customLists", description="The names of the user's custom lists"
    )
    section_order: list[String | None] | None = Field(
        None,
        alias="sectionOrder",
        description="The order each list should be displayed in",
    )
    split_completed_section_by_format: Boolean | None = Field(
        None,
        alias="splitCompletedSectionByFormat",
        description="If the completed sections of the list should be separated by format",
    )
    theme: String | None = Field(None, description="list theme")
    typename__: Literal["MediaListOptionsInput"] | None = Field(
        "MediaListOptionsInput", alias="__typename"
    )


class MediaTitleInput(BaseModel):
    """
    The official titles of the media in various languages
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    english: String | None = Field(None, description="The official english title")
    native: String | None = Field(
        None, description="Official title in it's native language"
    )
    romaji: String | None = Field(
        None, description="The romanization of the native language title"
    )
    typename__: Literal["MediaTitleInput"] | None = Field(
        "MediaTitleInput", alias="__typename"
    )


class NotificationOptionInput(BaseModel):
    """
    Notification option input
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Boolean | None = Field(
        None, description="Whether this type of notification is enabled"
    )
    type: NotificationType | None = Field(None, description="The type of notification")
    typename__: Literal["NotificationOptionInput"] | None = Field(
        "NotificationOptionInput", alias="__typename"
    )


class StaffNameInput(BaseModel):
    """
    The names of the staff member
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    alternative: list[String | None] | None = Field(
        None, description="Other names the character might be referred by"
    )
    first: String | None = Field(None, description="The person's given name")
    last: String | None = Field(None, description="The person's surname")
    middle: String | None = Field(None, description="The person's middle name")
    native: String | None = Field(
        None, description="The person's full name in their native language"
    )
    typename__: Literal["StaffNameInput"] | None = Field(
        "StaffNameInput", alias="__typename"
    )


# Activity union type
ActivityUnion: TypeAlias = Union[
    "list_activity",
    "message_activity",
    "text_activity",
]


# Likeable union type
LikeableUnion: TypeAlias = Union[
    "activity_reply",
    "list_activity",
    "message_activity",
    "text_activity",
    "thread",
    "thread_comment",
]


# Notification union type
NotificationUnion: TypeAlias = Union[
    "activity_like_notification",
    "activity_mention_notification",
    "activity_message_notification",
    "activity_reply_like_notification",
    "activity_reply_notification",
    "activity_reply_subscribed_notification",
    "airing_notification",
    "following_notification",
    "media_data_change_notification",
    "media_deletion_notification",
    "media_merge_notification",
    "related_media_addition_notification",
    "thread_comment_like_notification",
    "thread_comment_mention_notification",
    "thread_comment_reply_notification",
    "thread_comment_subscribed_notification",
    "thread_like_notification",
]
